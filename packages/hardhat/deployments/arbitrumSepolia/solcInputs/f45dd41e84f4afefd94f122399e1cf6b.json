{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC4906.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\nimport {IERC721} from \"./IERC721.sol\";\n\n/// @title EIP-721 Metadata Update Extension\ninterface IERC4906 is IERC165, IERC721 {\n    /// @dev This event emits when the metadata of a token is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFT.\n    event MetadataUpdate(uint256 _tokenId);\n\n    /// @dev This event emits when the metadata of a range of tokens is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFTs.\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../token/ERC721/IERC721.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Receiver} from \"./IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC721} from \"../ERC721.sol\";\nimport {IERC721Enumerable} from \"./IERC721Enumerable.sol\";\nimport {IERC165} from \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds enumerability\n * of all the token ids in the contract as well as all token ids owned by each account.\n *\n * CAUTION: `ERC721` extensions that implement custom `balanceOf` logic, such as `ERC721Consecutive`,\n * interfere with enumerability and should not be used together with `ERC721Enumerable`.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    mapping(address owner => mapping(uint256 index => uint256)) private _ownedTokens;\n    mapping(uint256 tokenId => uint256) private _ownedTokensIndex;\n\n    uint256[] private _allTokens;\n    mapping(uint256 tokenId => uint256) private _allTokensIndex;\n\n    /**\n     * @dev An `owner`'s token query was out of bounds for `index`.\n     *\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\n     */\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\n\n    /**\n     * @dev Batch mint is not allowed.\n     */\n    error ERC721EnumerableForbiddenBatchMint();\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\n        if (index >= balanceOf(owner)) {\n            revert ERC721OutOfBoundsIndex(owner, index);\n        }\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\n        if (index >= totalSupply()) {\n            revert ERC721OutOfBoundsIndex(address(0), index);\n        }\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev See {ERC721-_update}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\n        address previousOwner = super._update(to, tokenId, auth);\n\n        if (previousOwner == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (previousOwner != to) {\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (previousOwner != to) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n\n        return previousOwner;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = balanceOf(to) - 1;\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = balanceOf(from);\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n\n    /**\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\n     */\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\n        if (amount > 0) {\n            revert ERC721EnumerableForbiddenBatchMint();\n        }\n        super._increaseBalance(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC721} from \"../ERC721.sol\";\nimport {Strings} from \"../../../utils/Strings.sol\";\nimport {IERC4906} from \"../../../interfaces/IERC4906.sol\";\nimport {IERC165} from \"../../../interfaces/IERC165.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\n    using Strings for uint256;\n\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\n    // defines events and does not include any external function.\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\n\n    // Optional mapping for token URIs\n    mapping(uint256 tokenId => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC165-supportsInterface}\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\n        if (bytes(_tokenURI).length > 0) {\n            return string.concat(base, _tokenURI);\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Emits {MetadataUpdate}.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        _tokenURIs[tokenId] = _tokenURI;\n        emit MetadataUpdate(tokenId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Base64.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        string memory result = new string(4 * ((data.length + 2) / 3));\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 32)\n\n            // Run over the input, 3 bytes at a time\n            for {\n                let dataPtr := data\n                let endPtr := add(data, mload(data))\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 bytes (18 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F which is the number of\n                // the previous character in the ASCII table prior to the Base64 Table\n                // The result is then added to the table to get the character to write,\n                // and finally write it in the result pointer but with a left shift\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // When data `bytes` is not exactly 3 bytes long\n            // it is padded with `=` characters at the end\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/Character0.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\n\ncontract Character0 {\n    //SEBIRATCHI\n    using Strings for uint256;\n\n    function generateCharacter() public pure returns (string memory) {\n        bytes memory svg = abi.encodePacked(\n            '<svg xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:cc=\"http://web.resource.org/cc/\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:svg=\"http://www.w3.org/2000/svg\" id=\"svg5103\" viewBox=\"0 0 215.41 292.71\" version=\"1.0\">',\n            '<g id=\"layer1\" transform=\"translate(-23.4 -39.669)\">',\n            '<g id=\"g8146\" transform=\"matrix(.75102 0 0 .75102 -4.5037 -10.766)\">',\n            '<g id=\"g8152\" fill-rule=\"evenodd\" transform=\"matrix(.75052 0 0 .75052 -216.14 -311.21)\">',\n            '<path id=\"path2167\" stroke-linejoin=\"round\" d=\"m717.14 823.8c1.12 105.96-68.16 197.1-184.29 197.1-116.12 0-193.62-60.06-192.85-205.67 0.75-145.94 96.77-306.47 184.28-308.57 93.35-2.31 191.19 155.92 192.86 317.14z\" stroke=\"#000\" stroke-linecap=\"round\" stroke-width=\"5\" fill=\"#fffad1\"/>',\n            '<path id=\"path3139\" d=\"m651.28 624.06c-5.83 1.31-2.42 9.29-0.69 13 23.63 65.18 34 137.07 21 205.98-14.39 63.4-60.88 120.71-123.6 140.81-26.22 9.1-54.32 11.1-81.87 11.04-4.47 1.82-2.54 7.71 1.76 8.21 54.16 15.3 116.15 12.4 164.2-19 47.68-31.7 74.44-88.89 75.5-145.41 2.6-57.93-10.88-115.44-31.62-169.2-6.37-15.49-12.98-31.13-22.55-44.93-0.59-0.49-1.39-0.67-2.13-0.5z\" fill=\"#807b00\" fill-opacity=\".25098\"/>',\n            '<path id=\"path4257\" stroke-linejoin=\"round\" d=\"m492.46 621.45c-5.68 23.03-8.36 31.25-26.43 34.34-12.46 2.13-25.01-9.67-20.73-32.92 3.44-18.64 17.62-37.46 33.58-40.06 17.6-2.85 18.18 20.02 13.58 38.64z\" fill-opacity=\".49804\" stroke=\"#000\" stroke-linecap=\"round\" stroke-width=\"2\" fill=\"#fff\"/>',\n            \"</g>\",\n            \"</g>\",\n            \"</g>\",\n            \"</svg>\"\n        );\n        return\n            string(\n                abi.encodePacked(\n                    \"data:image/svg+xml;base64,\",\n                    Base64.encode(svg)\n                )\n            );\n    }\n}"
    },
    "contracts/Character1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\n\ncontract Character1 {\n    //SEBIRATCHI\n    using Strings for uint256;\n\n    string[10] public colorNames = [\n        \"FFFFFF\",\n        \"FF0000\",\n        \"008000\",\n        \"0000FF\",\n        \"FFFF00\",\n        \"00FFFF\",\n        \"800000\",\n        \"808000\",\n        \"800080\",\n        \"808080\"\n    ];\n\n    function generateRandomNumber(\n        uint256 prevEntropy\n    ) public view returns (uint256) {\n        uint256 randomNumber = uint256(\n            keccak256(\n                abi.encode(\n                    prevEntropy,\n                    block.timestamp,\n                    block.prevrandao,\n                    blockhash(block.number - 1)\n                )\n            )\n        );\n        return uint256(randomNumber % 10);\n    }\n\n    function generateCharacter() public view returns (string memory) {\n        string[3] memory colors;\n        uint256[3] memory previous;\n        previous[0] = generateRandomNumber(0);\n        colors[0] = colorNames[previous[0]];\n        previous[1] = generateRandomNumber(previous[0]);\n        colors[1] = colorNames[generateRandomNumber(previous[1])];\n        previous[2] = generateRandomNumber(previous[1]);\n        colors[2] = colorNames[generateRandomNumber(previous[2])];\n        bytes memory svg = abi.encodePacked(\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"500px\" height=\"500px\" style=\"shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">',\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#fefefe\" d=\"M -0.5,-0.5 C 166.167,-0.5 332.833,-0.5 499.5,-0.5C 499.5,166.167 499.5,332.833 499.5,499.5C 332.833,499.5 166.167,499.5 -0.5,499.5C -0.5,332.833 -0.5,166.167 -0.5,-0.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#124d82\" d=\"M 215.5,80.5 C 229.883,79.3582 241.216,84.6915 249.5,96.5C 270.088,78.7984 291.422,77.965 313.5,94C 317.206,98.3609 320.039,103.194 322,108.5C 332.663,100.959 344.496,98.4591 357.5,101C 372.031,107.568 377.365,118.734 373.5,134.5C 389.204,136.692 399.704,145.358 405,160.5C 406.278,167.476 405.111,173.976 401.5,180C 420.679,189.188 427.846,204.021 423,224.5C 419.882,229.286 416.382,233.786 412.5,238C 422.968,244.723 426.801,254.223 424,266.5C 422.861,270.112 421.194,273.446 419,276.5C 414.984,280.348 411.151,284.348 407.5,288.5C 415.774,292.714 418.94,299.381 417,308.5C 415.445,314.186 412.945,319.353 409.5,324C 416.835,326.67 421.335,331.837 423,339.5C 425.699,349.654 423.032,357.988 415,364.5C 414.989,367.659 414.155,370.493 412.5,373C 405.61,375.944 398.61,378.611 391.5,381C 368.889,385.32 346.222,389.32 323.5,393C 310.15,393.285 296.816,393.785 283.5,394.5C 284.112,400.164 282.446,404.998 278.5,409C 259.928,418.238 240.595,420.572 220.5,416C 218.032,413.512 215.699,411.012 213.5,408.5C 204.195,409.614 194.862,409.781 185.5,409C 174.269,406.467 169.435,399.634 171,388.5C 173.618,383.884 177.451,380.717 182.5,379C 167.814,364.797 157.314,347.964 151,328.5C 148.255,313.534 145.755,298.534 143.5,283.5C 123.543,285.339 104.876,281.506 87.5,272C 84,268.5 80.5,265 77,261.5C 71.2,246.245 76.0334,235.412 91.5,229C 94.5,228.667 97.5,228.333 100.5,228C 84.0316,210.649 86.0316,195.983 106.5,184C 112.394,182.963 118.061,183.629 123.5,186C 128.968,190.467 134.135,195.3 139,200.5C 143.705,168.741 160.039,145.074 188,129.5C 185.236,106.352 194.403,90.0183 215.5,80.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#134c59\" d=\"M 277.5,116.5 C 274.57,115.701 271.57,115.368 268.5,115.5C 262.167,115.5 255.833,115.5 249.5,115.5C 259.687,114.543 270.021,114.043 280.5,114C 279.167,114.333 277.833,114.667 276.5,115C 277.056,115.383 277.389,115.883 277.5,116.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#789255\" d=\"M 268.5,115.5 C 271.57,115.368 274.57,115.701 277.5,116.5C 278.167,116.5 278.5,116.833 278.5,117.5C 274.96,117.247 271.627,116.581 268.5,115.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#fdf007\" d=\"M 249.5,115.5 C 255.833,115.5 262.167,115.5 268.5,115.5C 271.627,116.581 274.96,117.247 278.5,117.5C 280.903,117.448 283.236,117.781 285.5,118.5C 289.341,120.003 293.341,121.336 297.5,122.5C 324.115,132.605 345.282,149.605 361,173.5C 363.735,178.299 365.902,183.299 367.5,188.5C 367.763,192.346 369.097,195.68 371.5,198.5C 373.117,201.189 374.117,204.189 374.5,207.5C 375.162,211.466 375.495,215.466 375.5,219.5C 375.397,226.386 376.064,233.053 377.5,239.5C 377.833,239.5 378.167,239.5 378.5,239.5C 378.5,255.509 378.166,271.509 377.5,287.5C 375.779,292.562 374.779,297.895 374.5,303.5C 373.833,307.5 373.167,311.5 372.5,315.5C 371.836,317.978 371.503,320.645 371.5,323.5C 371.337,327.777 372.003,331.777 373.5,335.5C 374.643,343.616 378.31,350.45 384.5,356C 391.714,359.291 398.714,362.958 405.5,367C 394.883,371.9 383.883,375.067 372.5,376.5C 362.741,377.691 353.074,379.357 343.5,381.5C 340.505,381.294 337.838,381.96 335.5,383.5C 333.833,383.5 332.167,383.5 330.5,383.5C 308.863,385.013 287.196,386.347 265.5,387.5C 258.489,387.294 251.489,386.961 244.5,386.5C 230.736,385.637 217.069,383.971 203.5,381.5C 201.967,379.755 199.967,378.755 197.5,378.5C 191.372,375.887 186.205,371.887 182,366.5C 172.984,355.494 165.651,343.494 160,330.5C 158.463,321.314 156.63,312.314 154.5,303.5C 154.415,297.863 153.415,292.529 151.5,287.5C 151.81,284.287 151.477,281.287 150.5,278.5C 150.196,277.85 149.863,277.183 149.5,276.5C 138.47,275.79 127.47,275.124 116.5,274.5C 108.548,272.702 100.881,269.869 93.5,266C 90,262.5 86.5,259 83,255.5C 81.7362,248.085 84.2362,242.251 90.5,238C 91.7932,237.51 93.1266,237.343 94.5,237.5C 99.2723,237.522 103.939,238.189 108.5,239.5C 112.642,240.532 116.642,241.866 120.5,243.5C 123.308,245.439 126.308,247.272 129.5,249C 136.263,250.191 142.929,251.691 149.5,253.5C 151.102,255.074 153.102,255.741 155.5,255.5C 159.514,255.666 163.514,255.499 167.5,255C 169.648,252.925 169.982,250.592 168.5,248C 159.981,247.965 151.648,246.798 143.5,244.5C 139.818,242.236 135.818,240.57 131.5,239.5C 117.096,233.597 105.929,223.93 98,210.5C 97.3333,207.5 97.3333,204.5 98,201.5C 101.201,197.964 104.701,194.797 108.5,192C 111.5,191.333 114.5,191.333 117.5,192C 124.803,198.302 131.803,204.968 138.5,212C 141.742,212.986 144.408,212.152 146.5,209.5C 147.487,206.232 147.82,202.898 147.5,199.5C 149.13,195.089 150.13,190.422 150.5,185.5C 158.905,162.256 174.238,145.089 196.5,134C 213.039,124.764 230.705,118.597 249.5,115.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#4d7254\" d=\"M 285.5,118.5 C 290.151,118.494 294.151,119.827 297.5,122.5C 293.341,121.336 289.341,120.003 285.5,118.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#2d5666\" d=\"M 187.5,178.5 C 182.241,178.016 177.241,178.683 172.5,180.5C 176.911,174.774 181.911,174.107 187.5,178.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#114d80\" d=\"M 187.5,178.5 C 189.017,178.511 190.184,179.177 191,180.5C 195.319,188.423 194.153,195.256 187.5,201C 176.536,203.209 170.536,198.709 169.5,187.5C 169.193,184.512 170.193,182.179 172.5,180.5C 177.241,178.683 182.241,178.016 187.5,178.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#b7c34b\" d=\"M 150.5,185.5 C 150.13,190.422 149.13,195.089 147.5,199.5C 147.044,194.404 148.044,189.738 150.5,185.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#bbc551\" d=\"M 367.5,188.5 C 368.117,188.611 368.617,188.944 369,189.5C 370.131,192.445 370.964,195.445 371.5,198.5C 369.097,195.68 367.763,192.346 367.5,188.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#275374\" d=\"M 263.5,212.5 C 258.882,211.761 255.549,213.427 253.5,217.5C 254.952,219.979 254.452,221.979 252,223.5C 251.5,223.167 251,222.833 250.5,222.5C 252.05,218.828 251.55,218.161 249,220.5C 246.963,226.187 248.796,228.854 254.5,228.5C 254.5,229.5 254.5,230.5 254.5,231.5C 252.738,231.643 251.071,231.309 249.5,230.5C 248.522,230.977 247.689,231.643 247,232.5C 247.288,229.209 246.788,225.875 245.5,222.5C 244.511,226.107 244.177,229.774 244.5,233.5C 241.445,227.388 242.278,221.721 247,216.5C 251.338,210.19 256.838,208.857 263.5,212.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#094c82\" d=\"M 263.5,212.5 C 267.378,214.533 269.378,217.7 269.5,222C 269.259,225.207 268.759,228.374 268,231.5C 267.004,233.66 265.504,235.327 263.5,236.5C 258.821,236.666 254.155,236.499 249.5,236C 250.711,235.107 250.711,234.274 249.5,233.5C 247.872,234.535 246.205,234.535 244.5,233.5C 244.177,229.774 244.511,226.107 245.5,222.5C 246.788,225.875 247.288,229.209 247,232.5C 247.689,231.643 248.522,230.977 249.5,230.5C 251.071,231.309 252.738,231.643 254.5,231.5C 254.5,230.5 254.5,229.5 254.5,228.5C 248.796,228.854 246.963,226.187 249,220.5C 251.55,218.161 252.05,218.828 250.5,222.5C 251,222.833 251.5,223.167 252,223.5C 254.452,221.979 254.952,219.979 253.5,217.5C 255.549,213.427 258.882,211.761 263.5,212.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#baca55\" d=\"M 375.5,219.5 C 377.039,225.937 377.706,232.604 377.5,239.5C 376.064,233.053 375.397,226.386 375.5,219.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#20515e\" d=\"M 374.5,207.5 C 376.299,212.429 377.466,217.762 378,223.5C 378.499,228.823 378.666,234.156 378.5,239.5C 378.167,239.5 377.833,239.5 377.5,239.5C 377.706,232.604 377.039,225.937 375.5,219.5C 375.495,215.466 375.162,211.466 374.5,207.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#2a505a\" d=\"M 244.5,233.5 C 246.205,234.535 247.872,234.535 249.5,233.5C 250.711,234.274 250.711,235.107 249.5,236C 254.155,236.499 258.821,236.666 263.5,236.5C 259.469,238.439 255.136,238.939 250.5,238C 247.894,237.208 245.894,235.708 244.5,233.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#587954\" d=\"M 94.5,237.5 C 96.9664,236.366 99.633,236.199 102.5,237C 104.974,237.037 106.974,237.87 108.5,239.5C 103.939,238.189 99.2723,237.522 94.5,237.5 Z\" />',\n            \"</g>\",\n            '<g fill=\"#',\n            colors[0],\n            '\">',\n            '<path style=\"opacity:1\" d=\"M 218.5,88.5 C 232.158,88.8392 240.825,95.5059 244.5,108.5C 238.758,109.235 233.091,110.402 227.5,112C 216.454,115.509 205.787,119.676 195.5,124.5C 195.109,107.269 202.775,95.2694 218.5,88.5 Z\" />',\n            '<path style=\"opacity:1\" d=\"M 276.5,90.5 C 288.878,89.9033 299.711,93.57 309,101.5C 313.25,106.181 314.417,111.515 312.5,117.5C 311.833,117.833 311.167,118.167 310.5,118.5C 292.398,110.371 273.398,106.537 253.5,107C 258.782,98.0385 266.449,92.5385 276.5,90.5 Z\" />',\n            '<path style=\"opacity:1\" d=\"M 341.5,108.5 C 360.597,106.427 368.431,114.761 365,133.5C 362.447,137.158 361.114,141.158 361,145.5C 364.61,148.381 367.777,147.881 370.5,144C 375.476,142.962 380.142,143.628 384.5,146C 391.753,151.012 396.087,157.845 397.5,166.5C 397.458,171.918 395.291,176.251 391,179.5C 390.333,181.167 390.333,182.833 391,184.5C 395.968,187.401 401.135,189.901 406.5,192C 420.868,207.749 419.702,222.249 403,235.5C 398.43,242.4 400.263,245.9 408.5,246C 415.067,250.021 417.567,255.854 416,263.5C 415.751,266.177 414.751,268.51 413,270.5C 405.816,276.505 399.983,283.505 395.5,291.5C 396.509,294.836 398.842,296.336 402.5,296C 405.102,296.883 407.269,298.383 409,300.5C 409.611,304.682 408.944,308.682 407,312.5C 403.441,318.039 399.941,323.539 396.5,329C 396.585,330.107 396.919,331.107 397.5,332C 411.659,330.832 417.493,337.332 415,351.5C 413.695,354.638 411.529,356.971 408.5,358.5C 402.652,355.41 396.652,352.577 390.5,350C 380.883,340.447 377.716,328.947 381,315.5C 387.578,279.619 388.245,243.619 383,207.5C 376.243,179.14 361.743,155.64 339.5,137C 332.739,131.971 326.073,126.971 319.5,122C 321.154,119.013 323.487,116.679 326.5,115C 331.477,112.517 336.477,110.35 341.5,108.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#356058\" d=\"M 131.5,239.5 C 135.818,240.57 139.818,242.236 143.5,244.5C 140.017,243.248 136.351,242.414 132.5,242C 131.748,241.329 131.414,240.496 131.5,239.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#fbd16c\" d=\"M 265.5,248.5 C 261.481,248.646 257.481,248.979 253.5,249.5C 253.611,248.883 253.944,248.383 254.5,248C 258.358,247.19 262.024,247.357 265.5,248.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#18507a\" d=\"M 120.5,243.5 C 123.209,244.013 125.709,245.013 128,246.5C 128.945,246.095 129.612,245.428 130,244.5C 130.75,245.126 131.584,245.626 132.5,246C 131.692,246.308 131.025,246.808 130.5,247.5C 131.667,247.833 132.833,248.167 134,248.5C 137.65,247.8 140.817,246.466 143.5,244.5C 151.648,246.798 159.981,247.965 168.5,248C 169.982,250.592 169.648,252.925 167.5,255C 163.514,255.499 159.514,255.666 155.5,255.5C 153.898,253.926 151.898,253.259 149.5,253.5C 142.929,251.691 136.263,250.191 129.5,249C 126.308,247.272 123.308,245.439 120.5,243.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#98ad73\" d=\"M 149.5,253.5 C 151.898,253.259 153.898,253.926 155.5,255.5C 153.102,255.741 151.102,255.074 149.5,253.5 Z\" />',\n            \"</g>\",\n            '<g fill=\"#',\n            colors[1],\n            '\">',\n            '<path style=\"opacity:1\" d=\"M 265.5,248.5 C 271.534,249.517 276.867,252.183 281.5,256.5C 282.63,257.622 283.297,258.956 283.5,260.5C 283.5,263.167 283.5,265.833 283.5,268.5C 283.378,272.147 281.712,274.981 278.5,277C 276.075,278.213 273.741,279.379 271.5,280.5C 264.11,280.764 256.777,280.43 249.5,279.5C 239.293,274.814 236.293,267.148 240.5,256.5C 244.159,252.824 248.493,250.491 253.5,249.5C 257.481,248.979 261.481,248.646 265.5,248.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#f1b593\" d=\"M 283.5,260.5 C 285.026,261.492 285.693,262.992 285.5,265C 285.392,266.681 284.725,267.848 283.5,268.5C 283.5,265.833 283.5,263.167 283.5,260.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#0b4b8a\" d=\"M 116.5,274.5 C 127.47,275.124 138.47,275.79 149.5,276.5C 149.863,277.183 150.196,277.85 150.5,278.5C 149.833,286.5 149.167,286.5 148.5,278.5C 141.468,278.17 134.468,278.503 127.5,279.5C 132.812,280.437 138.146,280.437 143.5,279.5C 143.5,280.5 143.5,281.5 143.5,282.5C 135.978,282.569 128.645,282.235 121.5,281.5C 122.325,280.614 123.325,280.281 124.5,280.5C 124.5,279.5 124.5,278.5 124.5,277.5C 122.738,277.357 121.071,277.691 119.5,278.5C 117.547,277.239 115.547,276.073 113.5,275C 114.448,274.517 115.448,274.351 116.5,274.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#f2b592\" d=\"M 249.5,279.5 C 256.777,280.43 264.11,280.764 271.5,280.5C 264.697,282.973 257.697,283.14 250.5,281C 249.944,280.617 249.611,280.117 249.5,279.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#315a6d\" d=\"M 300.5,280.5 C 299.022,280.238 297.689,280.571 296.5,281.5C 298.286,293.322 299.12,305.322 299,317.5C 299.383,316.944 299.883,316.611 300.5,316.5C 300.5,320.167 300.5,323.833 300.5,327.5C 299.539,325.735 299.205,323.735 299.5,321.5C 299.25,320.078 298.417,319.078 297,318.5C 296.833,306.819 296.333,295.152 295.5,283.5C 294.502,292.141 294.169,300.808 294.5,309.5C 294.167,309.5 293.833,309.5 293.5,309.5C 293.334,300.494 293.5,291.494 294,282.5C 295.525,279.5 297.692,278.833 300.5,280.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#0c4c89\" d=\"M 300.5,280.5 C 301.833,292.5 301.833,304.5 300.5,316.5C 299.883,316.611 299.383,316.944 299,317.5C 299.12,305.322 298.286,293.322 296.5,281.5C 297.689,280.571 299.022,280.238 300.5,280.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#3f6457\" d=\"M 151.5,287.5 C 153.415,292.529 154.415,297.863 154.5,303.5C 152.546,298.608 151.546,293.274 151.5,287.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#557755\" d=\"M 377.5,287.5 C 377.38,293.259 376.38,298.592 374.5,303.5C 374.779,297.895 375.779,292.562 377.5,287.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#054a8e\" d=\"M 299.5,321.5 C 298.883,321.611 298.383,321.944 298,322.5C 295.015,318.78 293.848,314.447 294.5,309.5C 294.169,300.808 294.502,292.141 295.5,283.5C 296.333,295.152 296.833,306.819 297,318.5C 298.417,319.078 299.25,320.078 299.5,321.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#1a4e7a\" d=\"M 293.5,309.5 C 293.833,309.5 294.167,309.5 294.5,309.5C 293.848,314.447 295.015,318.78 298,322.5C 298.383,321.944 298.883,321.611 299.5,321.5C 299.205,323.735 299.539,325.735 300.5,327.5C 304.821,340.793 310.988,341.793 319,330.5C 322.246,321.097 323.246,311.43 322,301.5C 321.23,298.794 320.063,296.294 318.5,294C 319.148,292.56 319.481,291.06 319.5,289.5C 324.048,289.199 327.215,291.199 329,295.5C 331.178,307.241 330.845,318.908 328,330.5C 324.859,337.305 320.026,342.472 313.5,346C 302.439,346.623 295.605,341.456 293,330.5C 292.325,323.472 292.492,316.472 293.5,309.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#507962\" d=\"M 372.5,315.5 C 372.391,322.196 372.724,328.863 373.5,335.5C 372.003,331.777 371.337,327.777 371.5,323.5C 371.503,320.645 371.836,317.978 372.5,315.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#51784f\" d=\"M 197.5,378.5 C 199.967,378.755 201.967,379.755 203.5,381.5C 201.033,381.245 199.033,380.245 197.5,378.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#2c5762\" d=\"M 372.5,376.5 C 369.454,377.987 366.121,378.987 362.5,379.5C 363.5,380.167 364.5,380.833 365.5,381.5C 364.833,381.833 364.167,382.167 363.5,382.5C 359.838,380.151 356.171,379.984 352.5,382C 353.833,382.333 355.167,382.667 356.5,383C 352.195,382.923 347.862,382.756 343.5,382.5C 343.5,382.167 343.5,381.833 343.5,381.5C 353.074,379.357 362.741,377.691 372.5,376.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#6d823c\" d=\"M 343.5,381.5 C 343.5,381.833 343.5,382.167 343.5,382.5C 340.873,383.092 338.206,383.425 335.5,383.5C 337.838,381.96 340.505,381.294 343.5,381.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#265354\" d=\"M 330.5,383.5 C 330.389,384.117 330.056,384.617 329.5,385C 327.5,385.333 325.5,385.667 323.5,386C 310.111,386.075 296.778,386.742 283.5,388C 272.5,388.667 261.5,388.667 250.5,388C 248.292,387.809 246.292,387.309 244.5,386.5C 251.489,386.961 258.489,387.294 265.5,387.5C 287.196,386.347 308.863,385.013 330.5,383.5 Z\" />',\n            \"</g>\",\n            '<g fill=\"#',\n            colors[2],\n            '\">',\n            '<path style=\"opacity:1\" d=\"M 185.5,386.5 C 188.85,386.335 192.183,386.502 195.5,387C 203.942,389.944 212.608,391.944 221.5,393C 219.05,396.126 216.05,398.459 212.5,400C 202.375,402.326 192.375,401.992 182.5,399C 179.291,397.417 178.124,394.917 179,391.5C 180.805,389.174 182.972,387.508 185.5,386.5 Z\" />',\n            '<path style=\"opacity:1\" d=\"M 241.5,394.5 C 252.156,395.111 262.823,395.611 273.5,396C 274.982,398.592 274.648,400.925 272.5,403C 258.003,408.7 243.003,411.034 227.5,410C 223.756,408.249 222.756,405.415 224.5,401.5C 229.362,399.792 234.362,398.292 239.5,397C 240.381,396.292 241.047,395.458 241.5,394.5 Z\" />',\n            \"</g>\",\n            \"</svg>\"\n        );\n        return\n            string(\n                abi.encodePacked(\n                    \"data:image/svg+xml;base64,\",\n                    Base64.encode(svg)\n                )\n            );\n    }\n}"
    },
    "contracts/Character2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\n\ncontract Character2 {\n    //YATTATCHI\n    using Strings for uint256;\n\n    string[10] public colorNames = [\n        \"FFFFFF\",\n        \"FF0000\",\n        \"008000\",\n        \"0000FF\",\n        \"FFFF00\",\n        \"00FFFF\",\n        \"800000\",\n        \"808000\",\n        \"800080\",\n        \"808080\"\n    ];\n\n    function generateRandomNumber(\n        uint256 prevEntropy\n    ) public view returns (uint256) {\n        uint256 randomNumber = uint256(\n            keccak256(\n                abi.encode(\n                    prevEntropy,\n                    block.timestamp,\n                    block.prevrandao,\n                    blockhash(block.number - 1)\n                )\n            )\n        );\n        return uint256(randomNumber % 10);\n    }\n\n    function generateCharacter() public view returns (string memory) {\n        string[3] memory colors;\n        uint256[3] memory previous;\n        previous[0] = generateRandomNumber(0);\n        colors[0] = colorNames[previous[0]];\n        previous[1] = generateRandomNumber(previous[0]);\n        colors[1] = colorNames[generateRandomNumber(previous[1])];\n        previous[2] = generateRandomNumber(previous[1]);\n        colors[2] = colorNames[generateRandomNumber(previous[2])];\n        bytes memory svg = abi.encodePacked(\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"500px\" height=\"500px\" style=\"shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">',\n            '<g><path style=\"opacity:0.954\" fill=\"#124d84\" d=\"M 247.5,57.5 C 252.941,57.2651 257.274,59.2651 260.5,63.5C 274.405,57.11 280.405,61.4434 278.5,76.5C 287.032,77.1884 290.532,81.8551 289,90.5C 288.727,92.3289 287.893,93.8289 286.5,95C 294.363,101.592 294.363,108.258 286.5,115C 277.12,118.625 267.953,118.125 259,113.5C 255.176,120.446 252.009,127.78 249.5,135.5C 291.512,131.763 326.678,145.43 355,176.5C 359.389,181.889 363.389,187.556 367,193.5C 374.49,188.853 381.157,189.853 387,196.5C 388.629,192.069 391.129,188.236 394.5,185C 405.227,180.863 411.894,184.363 414.5,195.5C 414.167,196.167 413.833,196.833 413.5,197.5C 416.885,197.312 420.218,198.146 423.5,200C 427.192,204.852 428.192,210.185 426.5,216C 433.715,221.213 435.382,227.879 431.5,236C 432.045,239.187 432.711,242.354 433.5,245.5C 446.709,252.556 454.543,263.556 457,278.5C 461.855,306.93 454.688,331.764 435.5,353C 413.88,370.215 390.213,373.882 364.5,364C 358.658,360.246 352.991,356.246 347.5,352C 343.578,348.749 340.412,344.916 338,340.5C 320.45,358.192 299.283,368.859 274.5,372.5C 278.421,382.425 282.255,392.425 286,402.5C 291.219,419.895 285.385,431.729 268.5,438C 250.259,442.306 231.925,442.639 213.5,439C 205.084,437.715 198.584,433.548 194,426.5C 192.098,410.388 199.265,401.221 215.5,399C 228.239,398.082 240.572,399.915 252.5,404.5C 252.833,404.167 253.167,403.833 253.5,403.5C 251.303,396.077 248.803,388.744 246,381.5C 245.505,379.527 245.338,377.527 245.5,375.5C 218.904,375.776 196.07,366.776 177,348.5C 168.512,356.321 160.012,364.154 151.5,372C 139.732,377.091 128.399,376.091 117.5,369C 99.0415,356.878 88.3748,339.878 85.5,318C 86.9369,302.447 95.2702,296.447 110.5,300C 117.479,302.641 122.979,307.141 127,313.5C 133.251,322.999 139.251,332.666 145,342.5C 150.533,337.302 155.7,331.802 160.5,326C 151.085,310.177 146.418,293.01 146.5,274.5C 132.351,273.431 119.351,268.931 107.5,261C 97.4618,254.635 88.2952,247.135 80,238.5C 71.9835,227.2 72.8169,216.7 82.5,207C 87.3759,204.264 92.3759,203.93 97.5,206C 115.321,219.247 134.654,229.914 155.5,238C 159.05,238.784 162.55,239.617 166,240.5C 169.682,236.985 173.182,233.318 176.5,229.5C 153.538,223.185 132.204,213.352 112.5,200C 94.4248,185.044 87.9248,166.211 93,143.5C 100.507,129.831 112.007,124.331 127.5,127C 132.373,127.884 137.04,129.384 141.5,131.5C 149.477,116.072 162.31,107.739 180,106.5C 196.162,107.911 208.828,115.244 218,128.5C 221.047,117.358 224.88,106.525 229.5,96C 217.125,88.4143 215.459,79.081 224.5,68C 229.055,66.0483 233.388,66.5483 237.5,69.5C 238.405,63.2771 241.739,59.2771 247.5,57.5 Z\"/></g>',\n            '<g fill=\"#',\n            colors[0],\n            '\">',\n            '<path style=\"opacity:1\" d=\"M 247.5,66.5 C 249.144,66.2865 250.644,66.6198 252,67.5C 252.333,71.8333 252.667,76.1667 253,80.5C 254.581,83.5534 256.914,84.22 260,82.5C 260.84,78.9367 262.174,75.6034 264,72.5C 265.87,70.7811 268.037,69.7811 270.5,69.5C 269.614,74.9402 266.947,79.2735 262.5,82.5C 261.098,85.9696 262.264,88.303 266,89.5C 270.597,87.2446 275.43,85.9113 280.5,85.5C 280.657,86.8734 280.49,88.2068 280,89.5C 276.814,92.0039 273.981,94.8373 271.5,98C 272.101,99.605 273.101,100.938 274.5,102C 277.224,102.27 279.891,102.77 282.5,103.5C 283.583,104.365 283.749,105.365 283,106.5C 279.961,107.608 276.794,108.275 273.5,108.5C 268.377,107.071 263.21,105.738 258,104.5C 253.265,104.565 250.265,106.898 249,111.5C 245.47,120.423 242.137,129.423 239,138.5C 234.97,140.456 230.803,142.122 226.5,143.5C 225.34,139.541 225.173,135.541 226,131.5C 228.868,123.228 231.535,114.895 234,106.5C 236.053,102.226 238.219,98.0597 240.5,94C 240.415,92.8926 240.081,91.8926 239.5,91C 235.581,89.4597 232.081,87.2931 229,84.5C 226.87,81.3351 227.037,78.3351 229.5,75.5C 233.167,77.6667 236.833,79.8333 240.5,82C 242.701,82.8249 244.534,82.3249 246,80.5C 246.223,75.7503 246.723,71.0836 247.5,66.5 Z\"/>',\n            '<path style=\"opacity:1\" d=\"M 400.5,191.5 C 403.485,191.818 405.152,193.485 405.5,196.5C 404.631,199.941 403.464,203.274 402,206.5C 400.087,212.094 401.92,214.261 407.5,213C 410.941,211.224 414.108,209.057 417,206.5C 418.518,208.614 418.851,210.947 418,213.5C 407.815,224.075 409.982,228.075 424.5,225.5C 424.5,226.833 424.5,228.167 424.5,229.5C 422.143,229.337 419.81,229.503 417.5,230C 414.833,232.667 414.833,235.333 417.5,238C 420.007,238.093 422.174,238.926 424,240.5C 424.711,242.367 424.211,243.867 422.5,245C 412.478,245.486 402.478,246.153 392.5,247C 390.264,250.145 388.764,253.645 388,257.5C 379.196,269.604 370.029,281.438 360.5,293C 351.87,299.961 343.537,307.295 335.5,315C 328.82,320.56 321.154,322.893 312.5,322C 311.833,321.333 311.167,320.667 310.5,320C 320.617,316.525 329.117,310.691 336,302.5C 350.079,282.68 363.413,262.346 376,241.5C 379.439,235.794 381.273,229.627 381.5,223C 381.586,216.338 379.086,210.838 374,206.5C 371.188,201.769 372.355,199.602 377.5,200C 379.833,202.333 382.167,204.667 384.5,207C 386.914,208.885 389.581,209.552 392.5,209C 394.139,205.741 395.306,202.241 396,198.5C 397.012,195.798 398.512,193.465 400.5,191.5 Z\"/>',\n            \"</g>\",\n            '<g><path style=\"opacity:1\" fill=\"#e40513\" d=\"M 174.5,115.5 C 187.22,115.238 198.054,119.571 207,128.5C 210.111,132.387 212.444,136.72 214,141.5C 214.755,144.303 214.422,146.97 213,149.5C 205.068,155.428 197.735,162.095 191,169.5C 178.588,157.306 165.254,146.306 151,136.5C 150.875,131.253 153.041,127.087 157.5,124C 162.98,120.593 168.647,117.76 174.5,115.5 Z\"/></g>',\n            '<g><path style=\"opacity:1\" fill=\"#e50212\" d=\"M 114.5,135.5 C 124.772,134.985 134.439,137.151 143.5,142C 158.658,151.817 172.658,163.151 185.5,176C 188.508,178.754 192.008,180.587 196,181.5C 200.403,180.412 201.57,177.745 199.5,173.5C 208.188,162.001 219.521,154.167 233.5,150C 271.73,138.312 306.063,145.312 336.5,171C 352.436,184.037 362.936,200.537 368,220.5C 369.145,225.799 369.478,231.132 369,236.5C 356.996,257.182 343.996,277.182 330,296.5C 322.411,305.1 313.077,310.766 302,313.5C 300.473,321.28 303.306,326.78 310.5,330C 315.5,330.667 320.5,330.667 325.5,330C 331.449,328.027 336.783,325.027 341.5,321C 353.604,310.899 365.104,300.065 376,288.5C 381.947,279.553 388.28,270.886 395,262.5C 396.741,259.691 397.908,256.691 398.5,253.5C 408.088,255.115 417.588,254.781 427,252.5C 439.637,258.489 446.97,268.489 449,282.5C 451.7,303.709 447.034,323.042 435,340.5C 420.213,356.081 402.046,362.914 380.5,361C 367.466,356.303 356.3,348.803 347,338.5C 346.414,329.323 342.247,327.156 334.5,332C 314.682,351.906 290.682,363.24 262.5,366C 219.539,371.602 187.372,355.768 166,318.5C 157.189,301.979 154.189,284.646 157,266.5C 155.915,265.707 154.748,265.04 153.5,264.5C 148.283,266.945 142.949,267.111 137.5,265C 118.68,258.496 102.18,248.329 88,234.5C 84.5926,230.372 82.926,225.705 83,220.5C 84.578,215.131 88.078,212.965 93.5,214C 109.009,224.926 125.342,234.593 142.5,243C 151.409,247.23 160.742,248.896 170.5,248C 177.017,242.148 182.85,235.648 188,228.5C 188.92,225.692 188.087,223.525 185.5,222C 181.251,220.874 176.918,220.208 172.5,220C 155.533,213.683 139.199,206.016 123.5,197C 107.033,185.899 99.1994,170.399 100,150.5C 102.351,142.984 107.184,137.984 114.5,135.5 Z\"/></g>',\n            '<g><path style=\"opacity:1\" fill=\"#174c83\" d=\"M 229.5,170.5 C 243.441,168.702 248.941,174.702 246,188.5C 242.983,201.252 235.483,205.418 223.5,201C 216.507,193.905 215.673,186.071 221,177.5C 223.628,174.79 226.461,172.456 229.5,170.5 Z\"/></g>',\n            '<g><path style=\"opacity:1\" fill=\"#154c83\" d=\"M 297.5,232.5 C 306.26,232.09 311.26,236.256 312.5,245C 310.913,256.417 304.58,263.584 293.5,266.5C 283.716,263.4 280.216,256.734 283,246.5C 286.433,240.231 291.266,235.564 297.5,232.5 Z\"/></g>',\n            '<g fill=\"#',\n            colors[1],\n            '\">',\n            '<path style=\"opacity:1\" d=\"M 272.5,279.5 C 292.847,277.355 302.681,286.355 302,306.5C 295.71,323.559 284.21,328.392 267.5,321C 257.643,313.662 254.809,304.162 259,292.5C 262.076,286.589 266.576,282.255 272.5,279.5 Z\"/>',\n            \"</g>\",\n            '<g><path style=\"opacity:0.886\" fill=\"#004b85\" d=\"M 71.5,370.5 C 73.9928,370.329 75.8261,371.329 77,373.5C 73.4145,390.119 80.2479,399.453 97.5,401.5C 103.338,400.501 108.838,398.501 114,395.5C 117.668,396.504 119.002,398.837 118,402.5C 103.49,412.935 88.9903,412.769 74.5,402C 66.2866,393.39 64.4533,383.557 69,372.5C 69.9947,371.934 70.828,371.267 71.5,370.5 Z\"/></g>',\n            '<g fill=\"#',\n            colors[2],\n            '\">',\n            '<path style=\"opacity:1\" d=\"M 254.5,374.5 C 258.673,373.956 262.506,374.623 266,376.5C 269.667,385.167 273.333,393.833 277,402.5C 278.806,408.865 278.806,415.199 277,421.5C 270.637,428.074 262.804,431.574 253.5,432C 238.971,433.372 224.638,432.372 210.5,429C 199.822,424.612 198.822,418.612 207.5,411C 209.717,409.725 212.051,408.725 214.5,408C 230.182,407.036 245.182,409.869 259.5,416.5C 264.078,415.132 265.578,412.132 264,407.5C 261.77,398.248 258.77,389.248 255,380.5C 254.505,378.527 254.338,376.527 254.5,374.5 Z\"/>',\n            '<path style=\"opacity:1\" d=\"M 100.5,307.5 C 107.766,307.575 113.599,310.575 118,316.5C 124.396,325.901 130.396,335.568 136,345.5C 138.167,347.667 140.333,349.833 142.5,352C 143.833,352.667 145.167,352.667 146.5,352C 148.5,350.667 150.5,349.333 152.5,348C 156.315,343.018 160.648,338.518 165.5,334.5C 167.607,336.53 169.607,338.697 171.5,341C 164.833,346.333 158.833,352.333 153.5,359C 150.833,361 148.167,363 145.5,365C 140.167,367 134.833,367 129.5,365C 109.201,355.533 97.5341,339.7 94.5,317.5C 94.4898,312.838 96.4898,309.505 100.5,307.5 Z\"/>',\n            \"</g>\",\n            '<g><path style=\"opacity:0.892\" fill=\"#004b85\" d=\"M 44.5,382.5 C 47.3646,382.055 49.8646,382.722 52,384.5C 50.2076,391.351 49.2076,398.351 49,405.5C 55.8465,429.929 70.5132,436.596 93,425.5C 96.9145,426.183 98.2478,428.517 97,432.5C 83.5484,442.567 69.715,443.067 55.5,434C 39.2325,419.494 35.5659,402.328 44.5,382.5 Z\"/></g>',\n            \"</svg>\"\n        );\n        return\n            string(\n                abi.encodePacked(\n                    \"data:image/svg+xml;base64,\",\n                    Base64.encode(svg)\n                )\n            );\n    }\n}"
    },
    "contracts/Character3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\n\ncontract Character3 {\n    //YATTATCHI\n    using Strings for uint256;\n\n    string[10] public colorNames = [\n        \"FFFFFF\",\n        \"FF0000\",\n        \"008000\",\n        \"0000FF\",\n        \"FFFF00\",\n        \"00FFFF\",\n        \"800000\",\n        \"808000\",\n        \"800080\",\n        \"808080\"\n    ];\n\n    function generateRandomNumber(\n        uint256 prevEntropy\n    ) public view returns (uint256) {\n        uint256 randomNumber = uint256(\n            keccak256(\n                abi.encode(\n                    prevEntropy,\n                    block.timestamp,\n                    block.prevrandao,\n                    blockhash(block.number - 1)\n                )\n            )\n        );\n        return uint256(randomNumber % 10);\n    }\n\n    function generateCharacter() public view returns (string memory) {\n        string[3] memory colors;\n        uint256[3] memory previous;\n        previous[0] = generateRandomNumber(0);\n        colors[0] = colorNames[previous[0]];\n        previous[1] = generateRandomNumber(previous[0]);\n        colors[1] = colorNames[generateRandomNumber(previous[1])];\n        previous[2] = generateRandomNumber(previous[1]);\n        colors[2] = colorNames[generateRandomNumber(previous[2])];\n        bytes memory svg = abi.encodePacked(\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"500px\" height=\"500px\" style=\"shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">',\n            \"<g>\",\n            '<path style=\"opacity:0.944\" fill=\"#074d86\" d=\"M 356.5,3.5 C 358.17,3.75115 359.67,4.41782 361,5.5C 363.415,12.25 365.915,18.9166 368.5,25.5C 374.464,27.4324 380.464,29.2658 386.5,31C 390.615,34.6005 390.281,37.9339 385.5,41C 381,44.1667 376.5,47.3333 372,50.5C 371.273,56.6936 371.439,62.8603 372.5,69C 372.08,73.3749 369.747,75.0415 365.5,74C 361.361,71.3609 357.361,68.5276 353.5,65.5C 342.163,86.8355 324.496,96.0022 300.5,93C 285.334,87.5655 270.667,88.5655 256.5,96C 250.063,100.617 245.73,106.784 243.5,114.5C 299.573,112.604 341.073,135.938 368,184.5C 382.043,209.338 389.876,236.005 391.5,264.5C 400.777,263.062 410.111,262.062 419.5,261.5C 436.296,260.818 450.13,266.818 461,279.5C 467.869,289.137 469.202,299.47 465,310.5C 462.188,314.662 458.355,317.495 453.5,319C 448.146,319.529 442.813,319.362 437.5,318.5C 435.544,335.652 426.544,340.652 410.5,333.5C 406.446,340.2 400.446,343.867 392.5,344.5C 394.209,350.376 397.876,354.543 403.5,357C 413.087,359.154 422.754,360.654 432.5,361.5C 435.312,367.027 434.812,372.36 431,377.5C 421.17,391.175 408.003,400.008 391.5,404C 385.5,407.333 379.5,410.667 373.5,414C 365.013,416.072 357.013,414.739 349.5,410C 346.167,409.333 342.833,409.333 339.5,410C 330.833,415 322.167,420 313.5,425C 307.003,428.039 300.336,428.706 293.5,427C 288.833,424.333 284.167,421.667 279.5,419C 271.645,416.939 264.312,418.272 257.5,423C 251.167,427.333 244.833,431.667 238.5,436C 232.135,439.703 225.468,440.37 218.5,438C 212.809,434.487 207.476,430.487 202.5,426C 197.652,423.211 192.652,422.878 187.5,425C 180.658,428.922 173.658,432.588 166.5,436C 160.338,438.264 154.004,438.93 147.5,438C 142.272,435.503 139.939,431.337 140.5,425.5C 141.434,418.263 142.767,411.097 144.5,404C 141.473,389.108 135.806,375.275 127.5,362.5C 119.272,370.521 110.272,371.521 100.5,365.5C 96.0627,370.435 90.5627,373.435 84,374.5C 76.0228,373.189 71.3561,368.523 70,360.5C 59.2134,370.708 48.2134,371.041 37,361.5C 29.4921,347.534 30.1588,333.868 39,320.5C 49.0599,309.049 61.5599,301.549 76.5,298C 86.9875,295.069 97.6541,293.236 108.5,292.5C 104.887,257.288 109.721,223.288 123,190.5C 141.789,156.054 169.956,132.888 207.5,121C 216.069,118.628 224.736,116.795 233.5,115.5C 239.902,92.2807 255.235,80.6141 279.5,80.5C 287.255,81.0943 294.921,82.261 302.5,84C 319.955,86.2719 333.288,79.9386 342.5,65C 338.298,66.2272 333.964,67.3939 329.5,68.5C 326.458,68.5755 324.791,67.0755 324.5,64C 326.693,57.7529 328.693,51.4195 330.5,45C 327.449,39.5997 323.949,34.4331 320,29.5C 317.983,26.8728 318.15,24.3728 320.5,22C 327.833,21.6667 335.167,21.3333 342.5,21C 346.836,14.7839 351.503,8.95057 356.5,3.5 Z\" />',\n            \"</g>\",\n            '<g fill=\"#',\n            colors[0],\n            '\">',\n            '<path style=\"opacity:1\" d=\"M 355.5,18.5 C 357.662,22.1402 359.162,26.1402 360,30.5C 360.833,31.3333 361.667,32.1667 362.5,33C 366.489,34.3314 370.489,35.6647 374.5,37C 371,39.8333 367.5,42.6667 364,45.5C 363.667,50.8333 363.333,56.1667 363,61.5C 358.998,58.0009 354.665,55.0009 350,52.5C 345.493,53.779 341.16,55.4457 337,57.5C 337.621,52.7827 338.788,48.116 340.5,43.5C 338.222,39.1176 335.556,34.9509 332.5,31C 337.5,30.6667 342.5,30.3333 347.5,30C 350.3,26.2249 352.966,22.3916 355.5,18.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#c5bfde\" d=\"M 238.5,123.5 C 264.267,122.849 288.933,127.683 312.5,138C 325.833,145.994 337.333,156.16 347,168.5C 370.45,200.178 382.783,235.845 384,275.5C 384.603,295.19 384.103,314.857 382.5,334.5C 382.061,349.2 388.394,359.7 401.5,366C 409.218,367.286 416.884,368.786 424.5,370.5C 415.999,383.164 404.332,391.331 389.5,395C 382.579,398.265 375.913,401.932 369.5,406C 362.814,405.999 356.481,404.332 350.5,401C 346.5,400.333 342.5,400.333 338.5,401C 328.383,405.558 318.716,410.891 309.5,417C 305.738,419.156 301.738,419.823 297.5,419C 292.398,416.032 287.231,413.199 282,410.5C 274.326,407.811 266.826,408.311 259.5,412C 250.658,416.585 242.325,421.918 234.5,428C 229.994,430.814 225.327,431.147 220.5,429C 214.295,423.126 207.295,418.46 199.5,415C 195.833,414.333 192.167,414.333 188.5,415C 177.888,420.805 166.888,425.805 155.5,430C 150.77,431.604 148.77,429.937 149.5,425C 149.821,420.728 150.654,416.562 152,412.5C 152.667,406.5 152.667,400.5 152,394.5C 145.023,378.54 138.023,362.54 131,346.5C 110.697,296.578 110.364,246.578 130,196.5C 148.518,162.002 176.685,139.169 214.5,128C 222.572,126.157 230.572,124.657 238.5,123.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#104f87\" d=\"M 227.5,163.5 C 266.181,160.002 299.348,171.669 327,198.5C 355.619,236.777 355.619,275.111 327,313.5C 313.887,329.308 297.054,338.141 276.5,340C 258.195,341.536 239.862,341.869 221.5,341C 198.795,338.806 178.461,330.806 160.5,317C 134.651,291.451 128.485,261.617 142,227.5C 158.095,189.57 186.595,168.236 227.5,163.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#fdfada\" d=\"M 230.5,171.5 C 265.692,169.171 295.859,180.171 321,204.5C 345.638,238.78 345.638,273.113 321,307.5C 308.698,322.402 292.865,330.568 273.5,332C 242.548,336.682 212.548,333.349 183.5,322C 144.616,299.346 134.116,267.179 152,225.5C 168.234,193.104 194.401,175.104 230.5,171.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#1d548a\" d=\"M 200.5,191.5 C 207.004,191.138 208.671,193.638 205.5,199C 196.613,203.961 187.447,205.128 178,202.5C 177.08,199.692 177.913,197.525 180.5,196C 185.547,195.662 190.547,194.995 195.5,194C 197.491,193.626 199.158,192.793 200.5,191.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#1d548a\" d=\"M 270.5,191.5 C 278.762,194.119 287.262,195.785 296,196.5C 300.073,201.965 298.573,204.632 291.5,204.5C 283.195,204.552 275.695,202.219 269,197.5C 268.252,195.16 268.752,193.16 270.5,191.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#0d4e87\" d=\"M 187.5,212.5 C 204.654,210.658 217.154,217.324 225,232.5C 226.033,245.925 221.866,257.425 212.5,267C 209.661,268.92 206.661,270.587 203.5,272C 186.552,276.109 174.718,270.275 168,254.5C 165.118,235.94 171.618,221.94 187.5,212.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#0f4f87\" d=\"M 283.5,212.5 C 299.224,212.105 310.724,218.772 318,232.5C 319.397,246.309 315.231,258.142 305.5,268C 291.429,276.27 278.262,275.103 266,264.5C 256.61,246.546 259.443,230.712 274.5,217C 277.592,215.454 280.592,213.954 283.5,212.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#fafbfc\" d=\"M 189.5,220.5 C 205.935,219.072 210.768,225.739 204,240.5C 199.261,246.082 193.761,246.915 187.5,243C 180.299,234.657 180.966,227.157 189.5,220.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#fbfcfd\" d=\"M 278.5,220.5 C 293.784,218.266 298.95,224.266 294,238.5C 290.259,245.423 284.759,247.256 277.5,244C 269.196,235.583 269.529,227.749 278.5,220.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#fbfbfd\" d=\"M 198.5,251.5 C 206.748,250.632 209.915,254.298 208,262.5C 205.947,266.292 202.781,267.458 198.5,266C 194.547,261.169 194.547,256.335 198.5,251.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#fafbfc\" d=\"M 287.5,251.5 C 293.875,250.049 297.208,252.549 297.5,259C 297.741,263.926 295.407,266.426 290.5,266.5C 288.088,266.594 286.255,265.594 285,263.5C 283.773,258.938 284.607,254.938 287.5,251.5 Z\" />',\n            \"</g>\",\n            '<g fill=\"#',\n            colors[1],\n            '\">',\n            '<path style=\"opacity:1\" d=\"M 407.5,270.5 C 420.885,268.899 433.552,271.065 445.5,277C 455.197,283.228 459.364,292.061 458,303.5C 456.326,308.843 452.66,311.176 447,310.5C 439.317,309.742 432.483,306.909 426.5,302C 421.41,301.171 419.576,303.338 421,308.5C 428.86,313.172 430.36,319.339 425.5,327C 418.218,328.016 412.218,325.683 407.5,320C 405.5,319.333 403.5,319.333 401.5,320C 400.813,323.766 400.646,327.599 401,331.5C 398.016,334.1 394.516,335.1 390.5,334.5C 392.149,314.206 392.816,293.872 392.5,273.5C 397.647,272.604 402.647,271.604 407.5,270.5 Z\" />',\n            '<path style=\"opacity:1\" d=\"M 99.5,301.5 C 103.167,301.5 106.833,301.5 110.5,301.5C 112.63,317.685 116.797,333.352 123,348.5C 122.196,359.231 116.863,362.564 107,358.5C 108.193,352.036 105.693,349.203 99.5,350C 96.3318,357.001 91.3318,362.167 84.5,365.5C 81.0122,364.508 79.1789,362.175 79,358.5C 78.154,353.944 78.654,349.611 80.5,345.5C 80.0194,340.618 77.6861,339.451 73.5,342C 69.1705,351.321 62.0038,357.487 52,360.5C 47.5071,359.346 44.1738,356.679 42,352.5C 38.3885,337.005 43.2218,324.838 56.5,316C 70.1726,308.832 84.506,303.998 99.5,301.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#185289\" d=\"M 240.5,279.5 C 248.093,281.879 254.593,286.213 260,292.5C 261.316,296.128 260.149,298.461 256.5,299.5C 252.13,295.96 247.63,292.626 243,289.5C 238.932,292.119 234.766,294.619 230.5,297C 225.504,297.664 223.67,295.498 225,290.5C 230.625,287.359 235.792,283.692 240.5,279.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#0d4f87\" d=\"M 198.5,343.5 C 201.044,343.104 203.211,343.771 205,345.5C 206.175,351.865 207.508,358.199 209,364.5C 209.667,370.5 209.667,376.5 209,382.5C 207.347,386.482 204.347,388.482 200,388.5C 192.645,386.16 186.645,381.826 182,375.5C 177.468,369.773 173.968,363.44 171.5,356.5C 172.486,352.853 174.819,351.686 178.5,353C 182.565,362.731 188.565,371.065 196.5,378C 198.025,379.009 199.692,379.509 201.5,379.5C 201.147,369.199 199.814,359.032 197.5,349C 197.581,347.076 197.914,345.243 198.5,343.5 Z\" />',\n            \"</g>\",\n            \"<g>\",\n            '<path style=\"opacity:1\" fill=\"#0f4f88\" d=\"M 304.5,343.5 C 308.198,342.68 310.531,344.013 311.5,347.5C 307.669,355.828 303.836,364.162 300,372.5C 298.051,383.885 301.884,386.385 311.5,380C 318.645,373.193 324.645,365.527 329.5,357C 331.5,356.333 333.5,356.333 335.5,357C 336.081,357.893 336.415,358.893 336.5,360C 332.155,370.028 325.821,378.694 317.5,386C 312.062,390.921 305.729,392.588 298.5,391C 293.297,388.267 290.631,383.933 290.5,378C 290.908,373.292 292.074,368.792 294,364.5C 297.529,357.442 301.029,350.442 304.5,343.5 Z\" />',\n            \"</g>\",\n            '<g fill=\"#',\n            colors[2],\n            '\">',\n            '<path style=\"opacity:0.968\" d=\"M 236.5,464.5 C 255.503,464.333 274.503,464.5 293.5,465C 309.512,465.716 325.178,468.382 340.5,473C 344.475,473.967 347.142,476.3 348.5,480C 348.097,481.473 347.43,482.806 346.5,484C 333.142,489.873 319.142,493.206 304.5,494C 270.707,496.739 237.04,495.739 203.5,491C 195.508,490.053 188.342,487.22 182,482.5C 181.267,477.537 183.433,474.37 188.5,473C 204.33,468.434 220.33,465.6 236.5,464.5 Z\" />',\n            \"</g>\",\n            \"</svg>\"\n        );\n        return\n            string(\n                abi.encodePacked(\n                    \"data:image/svg+xml;base64,\",\n                    Base64.encode(svg)\n                )\n            );\n    }\n}"
    },
    "contracts/Tama.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\n\nimport \"./Character0.sol\";\nimport \"./Character1.sol\";\nimport \"./Character2.sol\";\nimport \"./Character3.sol\";\nimport \"./TamaFood.sol\";\n\nerror TransferFailed();\n\ncontract Tama is ERC721, ERC721URIStorage, ERC721Enumerable, Ownable {\n    using Strings for uint256;\n    uint256 public mintFee = 0.01 ether;\n    uint256 public maxMint = 1;\n    uint256 public eatTime = 5 minutes;\n    uint256 public playTime = 30 seconds;\n    uint256 public eatPoints = 25;\n    uint256 public playPoints = 10;\n    uint256 public lv1Trigger = 100;\n    uint256 public lv2Trigger = 500;\n    uint256 public eatFee = 500 ether; //based on TamaFood Token\n    uint256 private _nextTokenId;\n\n    //SVG Images Contracts\n    address public tama0;\n    address public tama1;\n    address public tama2;\n    address public tama3;\n\n    //Food Token to feed the TAMA\n    IERC20 foodToken;\n    address public tamaFoodAddress;\n\n    /**\n     * -----------  EVENTS  -----------\n     */\n\n    event levelUp(uint256 tokenId, uint8 newLevel);\n    event tokenBorn(uint256 tokenId, uint256 birthTimestamp);\n\n    event tokenFeeded(\n        uint256 tokenId,\n        uint256 lastCounter,\n        uint256 eatTimestamp\n    );\n\n    event tokenPlayed(\n        uint256 tokenId,\n        uint256 lastCounter,\n        uint256 playTimestamp\n    );\n\n    constructor() ERC721(\"Tama\", \"TAMA\") Ownable(msg.sender) {}\n\n    /**\n     * -----------  GAMEDATA STRUCTURE  -----------\n     */\n\n    struct tokenData {\n        uint8 level;\n        uint256 startTime;\n        uint256 lastEat;\n        uint256 lastPlay;\n        uint256 counter;\n    }\n\n    mapping(uint256 => tokenData) public gameData;\n\n    /**\n     * -----------  CHECKS COMMON TO GAME FUNCTIONS  -----------\n     */\n\n    modifier gameChecks(uint256 tokenId) {\n        require(\n            ownerOf(tokenId) == msg.sender,\n            \"You are not the tokenId holder\"\n        );\n\n        require(gameData[tokenId].startTime > 0, \"Your Tama is not yet born\");\n\n        _;\n\n        //Level Up management\n        if (\n            gameData[tokenId].counter >= lv1Trigger &&\n            gameData[tokenId].level < 1\n        ) {\n            gameData[tokenId].level = 1;\n            _setTokenURI(tokenId, getTokenURI2(tokenId));\n            emit levelUp(tokenId, 1);\n        }\n\n        if (\n            gameData[tokenId].counter >= lv2Trigger &&\n            gameData[tokenId].level < 2\n        ) {\n            gameData[tokenId].level = 2;\n            _setTokenURI(tokenId, getTokenURI3(tokenId));\n            emit levelUp(tokenId, 1);\n        }\n    }\n\n    /**\n     * -----------  MINT FUNCTIONS -----------\n     */\n\n    function purchase(uint256 amount) public payable {\n        require(amount <= maxMint, \"maxMint exceeded.\");\n        require(balanceOf(msg.sender) < maxMint, \"maxMint reached.\");\n        require(msg.value == mintFee * amount, \"Wrong ETH value sent.\");\n        for (uint8 i = 0; i < amount; i++) {\n            safeMint(msg.sender);\n        }\n    }\n\n    function safeMint(address to) internal {\n        uint256 tokenId = _nextTokenId++;\n        _setTokenURI(tokenId, getTokenURI0(tokenId));\n        _safeMint(to, tokenId);\n    }\n\n    /**\n     * -----------  GAME FUNCTIONS  -----------\n     */\n\n    //Hatches the Tama\n    function start(uint256 tokenId) public {\n        require(\n            ownerOf(tokenId) == msg.sender,\n            \"You are not the tokenId holder\"\n        );\n        require(gameData[tokenId].startTime == 0, \"Token already Hatched\");\n        _setTokenURI(tokenId, getTokenURI1(tokenId));\n        gameData[tokenId].startTime = block.timestamp;\n        emit tokenBorn(tokenId, gameData[tokenId].startTime);\n    }\n\n    //Feeds the Tama with the TamaFood ERC-20 token\n    function eat(uint256 tokenId) public payable gameChecks(tokenId) {\n        foodToken = IERC20(tamaFoodAddress);\n        require(\n            block.timestamp - gameData[tokenId].lastEat > eatTime ||\n                gameData[tokenId].lastEat == 0,\n            \"Tama is not hungry now. Please wait a bit.\"\n        );\n        require(\n            foodToken.transferFrom(msg.sender, address(this), eatFee),\n            \"Not enough TamaFood sent.\"\n        );\n        gameData[tokenId].lastEat = block.timestamp;\n        gameData[tokenId].counter += eatPoints;\n        emit tokenFeeded(\n            tokenId,\n            gameData[tokenId].counter,\n            gameData[tokenId].lastEat\n        );\n    }\n\n    //Plays with the Tama\n    function play(uint256 tokenId) public gameChecks(tokenId) {\n        require(\n            block.timestamp - gameData[tokenId].lastPlay > playTime ||\n                gameData[tokenId].lastPlay == 0,\n            \"Tama has just play. Please wait a bit.\"\n        );\n        gameData[tokenId].lastPlay = block.timestamp;\n        gameData[tokenId].counter += playPoints;\n        emit tokenPlayed(\n            tokenId,\n            gameData[tokenId].counter,\n            gameData[tokenId].lastPlay\n        );\n    }\n\n    /**\n     * -----------  SET IMAGE + METADATA FUNCTIONS  -----------\n     */\n\n    //Sets SVG encoding for each of the 4 different evolutions: egg, character1, character2, character3.\n    function getTokenURI0(\n        uint256 tokenId\n    ) internal view returns (string memory) {\n        Character0 ch0 = Character0(tama0);\n\n        bytes memory dataURI = abi.encodePacked(\n            \"{\",\n            '\"name\": \"Tama #',\n            tokenId.toString(),\n            '\",',\n            '\"description\": \"Your own chain Pet\",',\n            '\"image\": \"',\n            ch0.generateCharacter(),\n            '\"',\n            \"}\"\n        );\n\n        return\n            string(\n                abi.encodePacked(\n                    \"data:application/json;base64,\",\n                    Base64.encode(dataURI)\n                )\n            );\n    }\n\n    function getTokenURI1(\n        uint256 tokenId\n    ) internal view returns (string memory) {\n        Character1 ch1 = Character1(tama1);\n\n        bytes memory dataURI = abi.encodePacked(\n            \"{\",\n            '\"name\": \"Tama #',\n            tokenId.toString(),\n            '\",',\n            '\"description\": \"Your own chain Pet\",',\n            '\"image\": \"',\n            ch1.generateCharacter(),\n            '\"',\n            \"}\"\n        );\n\n        return\n            string(\n                abi.encodePacked(\n                    \"data:application/json;base64,\",\n                    Base64.encode(dataURI)\n                )\n            );\n    }\n\n    function getTokenURI2(\n        uint256 tokenId\n    ) internal view returns (string memory) {\n        Character2 ch2 = Character2(tama2);\n\n        bytes memory dataURI = abi.encodePacked(\n            \"{\",\n            '\"name\": \"Tama #',\n            tokenId.toString(),\n            '\",',\n            '\"description\": \"Your own chain Pet\",',\n            '\"image\": \"',\n            ch2.generateCharacter(),\n            '\"',\n            \"}\"\n        );\n\n        return\n            string(\n                abi.encodePacked(\n                    \"data:application/json;base64,\",\n                    Base64.encode(dataURI)\n                )\n            );\n    }\n\n    function getTokenURI3(\n        uint256 tokenId\n    ) internal view returns (string memory) {\n        Character3 ch3 = Character3(tama3);\n\n        bytes memory dataURI = abi.encodePacked(\n            \"{\",\n            '\"name\": \"Tama #',\n            tokenId.toString(),\n            '\",',\n            '\"description\": \"Your own chain Pet\",',\n            '\"image\": \"',\n            ch3.generateCharacter(),\n            '\"',\n            \"}\"\n        );\n\n        return\n            string(\n                abi.encodePacked(\n                    \"data:application/json;base64,\",\n                    Base64.encode(dataURI)\n                )\n            );\n    }\n\n    /**\n     * -----------  SET FUNCTIONS  -----------\n     */\n\n    function setMintFee(uint256 _mintFee) public onlyOwner {\n        mintFee = _mintFee;\n    }\n\n    function setMaxMint(uint256 _maxMint) public onlyOwner {\n        maxMint = _maxMint;\n    }\n\n    function setEatTime(uint256 _eatTime) public onlyOwner {\n        eatTime = _eatTime;\n    }\n\n    function setPlayTime(uint256 _playTime) public onlyOwner {\n        playTime = _playTime;\n    }\n\n    function setEatPoints(uint256 _eatPoints) public onlyOwner {\n        eatPoints = _eatPoints;\n    }\n\n    function setPlayPoints(uint256 _playPoints) public onlyOwner {\n        playPoints = _playPoints;\n    }\n\n    function setLv1Trigger(uint256 _lv1Trigger) public onlyOwner {\n        lv1Trigger = _lv1Trigger;\n    }\n\n    function setLv2Trigger(uint256 _lv2Trigger) public onlyOwner {\n        lv2Trigger = _lv2Trigger;\n    }\n\n    function setEatFee(uint256 _eatFee) public onlyOwner {\n        eatFee = _eatFee;\n    }\n\n    function setCharacters(\n        address _tama0,\n        address _tama1,\n        address _tama2,\n        address _tama3\n    ) public onlyOwner {\n        tama0 = _tama0;\n        tama1 = _tama1;\n        tama2 = _tama2;\n        tama3 = _tama3;\n    }\n\n    function setTamaFoodAddress(address _tamaFoodAddress) public onlyOwner {\n        tamaFoodAddress = _tamaFoodAddress;\n    }\n\n    /**\n     * -----------  Financial Functions  -----------\n     */\n\n    function withdraw() public payable onlyOwner {\n        uint balance = address(this).balance;\n        (bool sent, bytes memory data) = msg.sender.call{value: balance}(\"\");\n        require(sent, \"Failed to send Ether\");\n        //uint256 tokenBalance = foodToken.balanceOf(address(this));\n        /*if (tokenBalance != 0) {\n            foodToken.transfer(msg.sender, tokenBalance);\n        }*/\n    }\n\n    /**\n     * -----------  ERC721Storage FUNCTIONS  -----------\n     */\n\n    function _update(\n        address to,\n        uint256 tokenId,\n        address auth\n    ) internal override(ERC721, ERC721Enumerable) returns (address) {\n        return super._update(to, tokenId, auth);\n    }\n\n    function _increaseBalance(\n        address account,\n        uint128 value\n    ) internal override(ERC721, ERC721Enumerable) {\n        super._increaseBalance(account, value);\n    }\n\n    function tokenURI(\n        uint256 tokenId\n    ) public view override(ERC721, ERC721URIStorage) returns (string memory) {\n        return super.tokenURI(tokenId);\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    )\n        public\n        view\n        override(ERC721, ERC721Enumerable, ERC721URIStorage)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n}"
    },
    "contracts/TamaFood.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract TamaFood is ERC20, Ownable {\n    uint256 pricePerEth = 1000;\n\n    //bool freeTokens = false;\n\n    constructor() ERC20(\"TamaFood\", \"TAFOO\") Ownable(msg.sender) {}\n\n    function mint(address to) public payable {\n        require(msg.value != 0, \"No ETH sent\");\n        uint256 amount = (msg.value * pricePerEth);\n        _mint(to, amount);\n    }\n\n    function setPricePerEth(uint256 _pricePerEth) external onlyOwner {\n        pricePerEth = _pricePerEth;\n    }\n}"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}