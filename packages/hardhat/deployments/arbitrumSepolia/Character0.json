{
  "address": "0x088aCBf8115d60ed56CBb30328E4dFd5953fAad4",
  "abi": [
    {
      "inputs": [],
      "name": "generateCharacter",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e7d468c6208189c4f8cf1c445019fbbf4434fda2f4dc3254b25ffab148ddf2f",
  "receipt": {
    "to": null,
    "from": "0xd6BdCd93C6D70d4455B0975a8e4169993a1383d7",
    "contractAddress": "0x088aCBf8115d60ed56CBb30328E4dFd5953fAad4",
    "transactionIndex": 1,
    "gasUsed": "30339460",
    "logsBloom": "0x
    "blockHash": "0x3d9468bd6a507d2a08d597f9599e7fe6d9a16c9a7b7856028a1eb04ecbaee475",
    "transactionHash": "0x1e7d468c6208189c4f8cf1c445019fbbf4434fda2f4dc3254b25ffab148ddf2f",
    "logs": [],
    "blockNumber": 15290934,
    "cumulativeGasUsed": "30339460",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f45dd41e84f4afefd94f122399e1cf6b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"generateCharacter\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Character0.sol\":\"Character0\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x6f7014d688c4386c26e8c02371ecb7f7740d2542f1ecadffd5a3084511e2a344\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/Character0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\ncontract Character0 {\\n    //SEBIRATCHI\\n    using Strings for uint256;\\n\\n    function generateCharacter() public pure returns (string memory) {\\n        bytes memory svg = abi.encodePacked(\\n            '<svg xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:cc=\\\"http://web.resource.org/cc/\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:dc=\\\"http://purl.org/dc/elements/1.1/\\\" xmlns:svg=\\\"http://www.w3.org/2000/svg\\\" id=\\\"svg5103\\\" viewBox=\\\"0 0 215.41 292.71\\\" version=\\\"1.0\\\">',\\n            '<g id=\\\"layer1\\\" transform=\\\"translate(-23.4 -39.669)\\\">',\\n            '<g id=\\\"g8146\\\" transform=\\\"matrix(.75102 0 0 .75102 -4.5037 -10.766)\\\">',\\n            '<g id=\\\"g8152\\\" fill-rule=\\\"evenodd\\\" transform=\\\"matrix(.75052 0 0 .75052 -216.14 -311.21)\\\">',\\n            '<path id=\\\"path2167\\\" stroke-linejoin=\\\"round\\\" d=\\\"m717.14 823.8c1.12 105.96-68.16 197.1-184.29 197.1-116.12 0-193.62-60.06-192.85-205.67 0.75-145.94 96.77-306.47 184.28-308.57 93.35-2.31 191.19 155.92 192.86 317.14z\\\" stroke=\\\"#000\\\" stroke-linecap=\\\"round\\\" stroke-width=\\\"5\\\" fill=\\\"#fffad1\\\"/>',\\n            '<path id=\\\"path3139\\\" d=\\\"m651.28 624.06c-5.83 1.31-2.42 9.29-0.69 13 23.63 65.18 34 137.07 21 205.98-14.39 63.4-60.88 120.71-123.6 140.81-26.22 9.1-54.32 11.1-81.87 11.04-4.47 1.82-2.54 7.71 1.76 8.21 54.16 15.3 116.15 12.4 164.2-19 47.68-31.7 74.44-88.89 75.5-145.41 2.6-57.93-10.88-115.44-31.62-169.2-6.37-15.49-12.98-31.13-22.55-44.93-0.59-0.49-1.39-0.67-2.13-0.5z\\\" fill=\\\"#807b00\\\" fill-opacity=\\\".25098\\\"/>',\\n            '<path id=\\\"path4257\\\" stroke-linejoin=\\\"round\\\" d=\\\"m492.46 621.45c-5.68 23.03-8.36 31.25-26.43 34.34-12.46 2.13-25.01-9.67-20.73-32.92 3.44-18.64 17.62-37.46 33.58-40.06 17.6-2.85 18.18 20.02 13.58 38.64z\\\" fill-opacity=\\\".49804\\\" stroke=\\\"#000\\\" stroke-linecap=\\\"round\\\" stroke-width=\\\"2\\\" fill=\\\"#fff\\\"/>',\\n            \\\"</g>\\\",\\n            \\\"</g>\\\",\\n            \\\"</g>\\\",\\n            \\\"</svg>\\\"\\n        );\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:image/svg+xml;base64,\\\",\\n                    Base64.encode(svg)\\n                )\\n            );\\n    }\\n}\",\"keccak256\":\"0x017f16f8215ff818f2a5846ab78af5a3b62a551c569a2b044ad44471ab3cb3b0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610ac9908161001c8239f35b600080fdfe6080600436101561000f57600080fd5b6000803560e01c63a561b7d41461002557600080fd5b3461087a578060031936011261087a577f3c73766720786d6c6e733a7264663d22687474703a2f2f7777772e77332e6f7260208301527f672f313939392f30322f32322d7264662d73796e7461782d6e73232220786d6c6040808401919091527f6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667222060608401527f786d6c6e733a63633d22687474703a2f2f7765622e7265736f757263652e6f7260808401527f672f63632f2220786d6c6e733a786c696e6b3d22687474703a2f2f7777772e7760a08401527f332e6f72672f313939392f786c696e6b2220786d6c6e733a64633d226874747060c08401527f3a2f2f7075726c2e6f72672f64632f656c656d656e74732f312e312f2220786d60e08401527f6c6e733a7376673d22687474703a2f2f7777772e77332e6f72672f323030302f6101008401527f737667222069643d2273766735313033222076696577426f783d2230203020326101208401527f31352e3431203239322e3731222076657273696f6e3d22312e30223e000000006101408401527f3c672069643d226c617965723122207472616e73666f726d3d227472616e736c61015c8401527330ba3294169919971a1016999c971b1b1c94911f60611b61017c8401527f3c672069643d22673831343622207472616e73666f726d3d226d6174726978286101908401527f2e373531303220302030202e3735313032202d342e35303337202d31302e37366101b0840152631b14911f60e11b6101d08401527f3c672069643d226738313532222066696c6c2d72756c653d226576656e6f64646101d48401527f22207472616e73666f726d3d226d6174726978282e373530353220302030202e6101f48401527f3735303532202d3231362e3134202d3331312e323129223e00000000000000006102148401527f3c706174682069643d22706174683231363722207374726f6b652d6c696e656a61022c8401527f6f696e3d22726f756e642220643d226d3731372e3134203832332e3863312e3161024c8401527f32203130352e39362d36382e3136203139372e312d3138342e3239203139372e61026c8401527f312d3131362e313220302d3139332e36322d36302e30362d3139322e38352d3261028c8401527f30352e363720302e37352d3134352e39342039362e37372d3330362e343720316102ac8401527f38342e32382d3330382e35372039332e33352d322e3331203139312e313920316102cc8401527f35352e3932203139322e3836203331372e31347a22207374726f6b653d2223306102ec8401527f303022207374726f6b652d6c696e656361703d22726f756e6422207374726f6b61030c8401527f652d77696474683d2235222066696c6c3d2223666666616431222f3e0000000061032c8401527f3c706174682069643d2270617468333133392220643d226d3635312e323820366103488401527f32342e3036632d352e383320312e33312d322e343220392e32392d302e3639206103688401527f31332032332e36332036352e3138203334203133372e3037203231203230352e6103888401527f39382d31342e33392036332e342d36302e3838203132302e37312d3132332e366103a88401527f203134302e38312d32362e323220392e312d35342e33322031312e312d38312e6103c88401527f38372031312e30342d342e343720312e38322d322e353420372e373120312e376103e88401527f3620382e32312035342e31362031352e33203131362e31352031322e342031366104088401527f342e322d31392034372e36382d33312e372037342e34342d38382e38392037356104288401527f2e352d3134352e343120322e362d35372e39332d31302e38382d3131352e34346104488401527f2d33312e36322d3136392e322d362e33372d31352e34392d31322e39382d33316104688401527f2e31332d32322e35352d34342e39332d302e35392d302e34392d312e33392d306104888401527f2e36372d322e31332d302e357a222066696c6c3d2223383037623030222066696104a884015274363616b7b830b1b4ba3c9e9117191a981c9c11179f60591b6104c88401527f3c706174682069643d22706174683432353722207374726f6b652d6c696e656a6104dd8401527f6f696e3d22726f756e642220643d226d3439322e3436203632312e3435632d356104fd8401527f2e36382032332e30332d382e33362033312e32352d32362e34332033342e333461051d8401527f2d31322e343620322e31332d32352e30312d392e36372d32302e37332d33322e61053d8401527f393220332e34342d31382e36342031372e36322d33372e34362033332e35382d61055d8401527f34302e30362031372e362d322e38352031382e31382032302e30322031332e3561057d8401527f382033382e36347a222066696c6c2d6f7061636974793d222e3439383034222061059d8401527f7374726f6b653d222330303022207374726f6b652d6c696e656361703d22726f6105bd8401527f756e6422207374726f6b652d77696474683d2232222066696c6c3d22236666666105dd8401526211179f60e91b6105fd840152631e17b39f60e11b61060084018190526106048401819052610608840152651e17b9bb339f60d11b61060c8401526105f283529061062083019067ffffffffffffffff8211848310176108665750610858926107e99183526108f4565b81519061083d603a8360208101937f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000855261082d815180926020868601910161087d565b810103601a8101855201836108a0565b8251938492602084525180928160208601528585019061087d565b601f01601f19168101030190f35b634e487b7160e01b81526041600452602490fd5b80fd5b60005b8381106108905750506000910152565b8181015183820152602001610880565b90601f8019910116810190811067ffffffffffffffff8211176108c257604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116108c257601f01601f191660200190565b805115610a6e576040516060810181811067ffffffffffffffff8211176108c257604052604081527f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f60408201528151600292838201809211610a585760039182900480851b94906001600160fe1b03811603610a5857926109b461099e866108d8565b956109ac60405197886108a0565b8087526108d8565b6020860190601f190136823793829183518401925b838110610a0757505050505106806001146109f4576002146109e9575090565b603d90600019015390565b50603d9081600019820153600119015390565b85600491979293949701918251600190603f9082828260121c16880101518453828282600c1c16880101518385015382828260061c16880101518885015316850101518782015301959291906109c9565b634e487b7160e01b600052601160045260246000fd5b506040516020810181811067ffffffffffffffff8211176108c257604052600081529056fea26469706673582212201835eae2f2a9aa88fce122a24f23e5f0774d553f307bf49934643c6c2c28a03264736f6c63430008140033",
  "deployedBytecode": "0x6080600436101561000f57600080fd5b6000803560e01c63a561b7d41461002557600080fd5b3461087a578060031936011261087a577f3c73766720786d6c6e733a7264663d22687474703a2f2f7777772e77332e6f7260208301527f672f313939392f30322f32322d7264662d73796e7461782d6e73232220786d6c6040808401919091527f6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667222060608401527f786d6c6e733a63633d22687474703a2f2f7765622e7265736f757263652e6f7260808401527f672f63632f2220786d6c6e733a786c696e6b3d22687474703a2f2f7777772e7760a08401527f332e6f72672f313939392f786c696e6b2220786d6c6e733a64633d226874747060c08401527f3a2f2f7075726c2e6f72672f64632f656c656d656e74732f312e312f2220786d60e08401527f6c6e733a7376673d22687474703a2f2f7777772e77332e6f72672f323030302f6101008401527f737667222069643d2273766735313033222076696577426f783d2230203020326101208401527f31352e3431203239322e3731222076657273696f6e3d22312e30223e000000006101408401527f3c672069643d226c617965723122207472616e73666f726d3d227472616e736c61015c8401527330ba3294169919971a1016999c971b1b1c94911f60611b61017c8401527f3c672069643d22673831343622207472616e73666f726d3d226d6174726978286101908401527f2e373531303220302030202e3735313032202d342e35303337202d31302e37366101b0840152631b14911f60e11b6101d08401527f3c672069643d226738313532222066696c6c2d72756c653d226576656e6f64646101d48401527f22207472616e73666f726d3d226d6174726978282e373530353220302030202e6101f48401527f3735303532202d3231362e3134202d3331312e323129223e00000000000000006102148401527f3c706174682069643d22706174683231363722207374726f6b652d6c696e656a61022c8401527f6f696e3d22726f756e642220643d226d3731372e3134203832332e3863312e3161024c8401527f32203130352e39362d36382e3136203139372e312d3138342e3239203139372e61026c8401527f312d3131362e313220302d3139332e36322d36302e30362d3139322e38352d3261028c8401527f30352e363720302e37352d3134352e39342039362e37372d3330362e343720316102ac8401527f38342e32382d3330382e35372039332e33352d322e3331203139312e313920316102cc8401527f35352e3932203139322e3836203331372e31347a22207374726f6b653d2223306102ec8401527f303022207374726f6b652d6c696e656361703d22726f756e6422207374726f6b61030c8401527f652d77696474683d2235222066696c6c3d2223666666616431222f3e0000000061032c8401527f3c706174682069643d2270617468333133392220643d226d3635312e323820366103488401527f32342e3036632d352e383320312e33312d322e343220392e32392d302e3639206103688401527f31332032332e36332036352e3138203334203133372e3037203231203230352e6103888401527f39382d31342e33392036332e342d36302e3838203132302e37312d3132332e366103a88401527f203134302e38312d32362e323220392e312d35342e33322031312e312d38312e6103c88401527f38372031312e30342d342e343720312e38322d322e353420372e373120312e376103e88401527f3620382e32312035342e31362031352e33203131362e31352031322e342031366104088401527f342e322d31392034372e36382d33312e372037342e34342d38382e38392037356104288401527f2e352d3134352e343120322e362d35372e39332d31302e38382d3131352e34346104488401527f2d33312e36322d3136392e322d362e33372d31352e34392d31322e39382d33316104688401527f2e31332d32322e35352d34342e39332d302e35392d302e34392d312e33392d306104888401527f2e36372d322e31332d302e357a222066696c6c3d2223383037623030222066696104a884015274363616b7b830b1b4ba3c9e9117191a981c9c11179f60591b6104c88401527f3c706174682069643d22706174683432353722207374726f6b652d6c696e656a6104dd8401527f6f696e3d22726f756e642220643d226d3439322e3436203632312e3435632d356104fd8401527f2e36382032332e30332d382e33362033312e32352d32362e34332033342e333461051d8401527f2d31322e343620322e31332d32352e30312d392e36372d32302e37332d33322e61053d8401527f393220332e34342d31382e36342031372e36322d33372e34362033332e35382d61055d8401527f34302e30362031372e362d322e38352031382e31382032302e30322031332e3561057d8401527f382033382e36347a222066696c6c2d6f7061636974793d222e3439383034222061059d8401527f7374726f6b653d222330303022207374726f6b652d6c696e656361703d22726f6105bd8401527f756e6422207374726f6b652d77696474683d2232222066696c6c3d22236666666105dd8401526211179f60e91b6105fd840152631e17b39f60e11b61060084018190526106048401819052610608840152651e17b9bb339f60d11b61060c8401526105f283529061062083019067ffffffffffffffff8211848310176108665750610858926107e99183526108f4565b81519061083d603a8360208101937f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000855261082d815180926020868601910161087d565b810103601a8101855201836108a0565b8251938492602084525180928160208601528585019061087d565b601f01601f19168101030190f35b634e487b7160e01b81526041600452602490fd5b80fd5b60005b8381106108905750506000910152565b8181015183820152602001610880565b90601f8019910116810190811067ffffffffffffffff8211176108c257604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116108c257601f01601f191660200190565b805115610a6e576040516060810181811067ffffffffffffffff8211176108c257604052604081527f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f60408201528151600292838201809211610a585760039182900480851b94906001600160fe1b03811603610a5857926109b461099e866108d8565b956109ac60405197886108a0565b8087526108d8565b6020860190601f190136823793829183518401925b838110610a0757505050505106806001146109f4576002146109e9575090565b603d90600019015390565b50603d9081600019820153600119015390565b85600491979293949701918251600190603f9082828260121c16880101518453828282600c1c16880101518385015382828260061c16880101518885015316850101518782015301959291906109c9565b634e487b7160e01b600052601160045260246000fd5b506040516020810181811067ffffffffffffffff8211176108c257604052600081529056fea26469706673582212201835eae2f2a9aa88fce122a24f23e5f0774d553f307bf49934643c6c2c28a03264736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}