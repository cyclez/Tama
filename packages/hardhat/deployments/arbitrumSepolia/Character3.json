{
  "address": "0xE80ED29785EA3edee63A0FA9a7e622d66E182859",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "colorNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "generateCharacter",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prevEntropy",
          "type": "uint256"
        }
      ],
      "name": "generateRandomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4bc9c945bc9226a5307d35e9d4c5558ebb0caf827c8e9f598373397b7d798c7f",
  "receipt": {
    "to": null,
    "from": "0xd6BdCd93C6D70d4455B0975a8e4169993a1383d7",
    "contractAddress": "0xE80ED29785EA3edee63A0FA9a7e622d66E182859",
    "transactionIndex": 1,
    "gasUsed": "127216273",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x4cae1a7d70d237a779ae37eea5b511edb36267e0dcd59a7036154ecefbb1c119",
    "transactionHash": "0x4bc9c945bc9226a5307d35e9d4c5558ebb0caf827c8e9f598373397b7d798c7f",
    "logs": [],
    "blockNumber": 15290967,
    "cumulativeGasUsed": "127216273",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4baa1416d773e0bbbee64309d610c7e7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"colorNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generateCharacter\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prevEntropy\",\"type\":\"uint256\"}],\"name\":\"generateRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Character3.sol\":\"Character3\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x6f7014d688c4386c26e8c02371ecb7f7740d2542f1ecadffd5a3084511e2a344\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/Character3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\ncontract Character3 {\\n    //YATTATCHI\\n    using Strings for uint256;\\n\\n    string[10] public colorNames = [\\n        \\\"FFFFFF\\\",\\n        \\\"FF0000\\\",\\n        \\\"008000\\\",\\n        \\\"0000FF\\\",\\n        \\\"FFFF00\\\",\\n        \\\"00FFFF\\\",\\n        \\\"800000\\\",\\n        \\\"808000\\\",\\n        \\\"800080\\\",\\n        \\\"808080\\\"\\n    ];\\n\\n    function generateRandomNumber(\\n        uint256 prevEntropy\\n    ) public view returns (uint256) {\\n        uint256 randomNumber = uint256(\\n            keccak256(\\n                abi.encode(\\n                    prevEntropy,\\n                    block.timestamp,\\n                    block.prevrandao,\\n                    blockhash(block.number - 1)\\n                )\\n            )\\n        );\\n        return uint256(randomNumber % 10);\\n    }\\n\\n    function generateCharacter() public view returns (string memory) {\\n        string[3] memory colors;\\n        uint256[3] memory previous;\\n        previous[0] = generateRandomNumber(0);\\n        colors[0] = colorNames[previous[0]];\\n        previous[1] = generateRandomNumber(previous[0]);\\n        colors[1] = colorNames[generateRandomNumber(previous[1])];\\n        previous[2] = generateRandomNumber(previous[1]);\\n        colors[2] = colorNames[generateRandomNumber(previous[2])];\\n        bytes memory svg = abi.encodePacked(\\n            '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" version=\\\"1.1\\\" width=\\\"500px\\\" height=\\\"500px\\\" style=\\\"shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">',\\n            \\\"<g>\\\",\\n            '<path style=\\\"opacity:0.944\\\" fill=\\\"#074d86\\\" d=\\\"M 356.5,3.5 C 358.17,3.75115 359.67,4.41782 361,5.5C 363.415,12.25 365.915,18.9166 368.5,25.5C 374.464,27.4324 380.464,29.2658 386.5,31C 390.615,34.6005 390.281,37.9339 385.5,41C 381,44.1667 376.5,47.3333 372,50.5C 371.273,56.6936 371.439,62.8603 372.5,69C 372.08,73.3749 369.747,75.0415 365.5,74C 361.361,71.3609 357.361,68.5276 353.5,65.5C 342.163,86.8355 324.496,96.0022 300.5,93C 285.334,87.5655 270.667,88.5655 256.5,96C 250.063,100.617 245.73,106.784 243.5,114.5C 299.573,112.604 341.073,135.938 368,184.5C 382.043,209.338 389.876,236.005 391.5,264.5C 400.777,263.062 410.111,262.062 419.5,261.5C 436.296,260.818 450.13,266.818 461,279.5C 467.869,289.137 469.202,299.47 465,310.5C 462.188,314.662 458.355,317.495 453.5,319C 448.146,319.529 442.813,319.362 437.5,318.5C 435.544,335.652 426.544,340.652 410.5,333.5C 406.446,340.2 400.446,343.867 392.5,344.5C 394.209,350.376 397.876,354.543 403.5,357C 413.087,359.154 422.754,360.654 432.5,361.5C 435.312,367.027 434.812,372.36 431,377.5C 421.17,391.175 408.003,400.008 391.5,404C 385.5,407.333 379.5,410.667 373.5,414C 365.013,416.072 357.013,414.739 349.5,410C 346.167,409.333 342.833,409.333 339.5,410C 330.833,415 322.167,420 313.5,425C 307.003,428.039 300.336,428.706 293.5,427C 288.833,424.333 284.167,421.667 279.5,419C 271.645,416.939 264.312,418.272 257.5,423C 251.167,427.333 244.833,431.667 238.5,436C 232.135,439.703 225.468,440.37 218.5,438C 212.809,434.487 207.476,430.487 202.5,426C 197.652,423.211 192.652,422.878 187.5,425C 180.658,428.922 173.658,432.588 166.5,436C 160.338,438.264 154.004,438.93 147.5,438C 142.272,435.503 139.939,431.337 140.5,425.5C 141.434,418.263 142.767,411.097 144.5,404C 141.473,389.108 135.806,375.275 127.5,362.5C 119.272,370.521 110.272,371.521 100.5,365.5C 96.0627,370.435 90.5627,373.435 84,374.5C 76.0228,373.189 71.3561,368.523 70,360.5C 59.2134,370.708 48.2134,371.041 37,361.5C 29.4921,347.534 30.1588,333.868 39,320.5C 49.0599,309.049 61.5599,301.549 76.5,298C 86.9875,295.069 97.6541,293.236 108.5,292.5C 104.887,257.288 109.721,223.288 123,190.5C 141.789,156.054 169.956,132.888 207.5,121C 216.069,118.628 224.736,116.795 233.5,115.5C 239.902,92.2807 255.235,80.6141 279.5,80.5C 287.255,81.0943 294.921,82.261 302.5,84C 319.955,86.2719 333.288,79.9386 342.5,65C 338.298,66.2272 333.964,67.3939 329.5,68.5C 326.458,68.5755 324.791,67.0755 324.5,64C 326.693,57.7529 328.693,51.4195 330.5,45C 327.449,39.5997 323.949,34.4331 320,29.5C 317.983,26.8728 318.15,24.3728 320.5,22C 327.833,21.6667 335.167,21.3333 342.5,21C 346.836,14.7839 351.503,8.95057 356.5,3.5 Z\\\" />',\\n            \\\"</g>\\\",\\n            '<g fill=\\\"#',\\n            colors[0],\\n            '\\\">',\\n            '<path style=\\\"opacity:1\\\" d=\\\"M 355.5,18.5 C 357.662,22.1402 359.162,26.1402 360,30.5C 360.833,31.3333 361.667,32.1667 362.5,33C 366.489,34.3314 370.489,35.6647 374.5,37C 371,39.8333 367.5,42.6667 364,45.5C 363.667,50.8333 363.333,56.1667 363,61.5C 358.998,58.0009 354.665,55.0009 350,52.5C 345.493,53.779 341.16,55.4457 337,57.5C 337.621,52.7827 338.788,48.116 340.5,43.5C 338.222,39.1176 335.556,34.9509 332.5,31C 337.5,30.6667 342.5,30.3333 347.5,30C 350.3,26.2249 352.966,22.3916 355.5,18.5 Z\\\" />',\\n            \\\"</g>\\\",\\n            \\\"<g>\\\",\\n            '<path style=\\\"opacity:1\\\" fill=\\\"#c5bfde\\\" d=\\\"M 238.5,123.5 C 264.267,122.849 288.933,127.683 312.5,138C 325.833,145.994 337.333,156.16 347,168.5C 370.45,200.178 382.783,235.845 384,275.5C 384.603,295.19 384.103,314.857 382.5,334.5C 382.061,349.2 388.394,359.7 401.5,366C 409.218,367.286 416.884,368.786 424.5,370.5C 415.999,383.164 404.332,391.331 389.5,395C 382.579,398.265 375.913,401.932 369.5,406C 362.814,405.999 356.481,404.332 350.5,401C 346.5,400.333 342.5,400.333 338.5,401C 328.383,405.558 318.716,410.891 309.5,417C 305.738,419.156 301.738,419.823 297.5,419C 292.398,416.032 287.231,413.199 282,410.5C 274.326,407.811 266.826,408.311 259.5,412C 250.658,416.585 242.325,421.918 234.5,428C 229.994,430.814 225.327,431.147 220.5,429C 214.295,423.126 207.295,418.46 199.5,415C 195.833,414.333 192.167,414.333 188.5,415C 177.888,420.805 166.888,425.805 155.5,430C 150.77,431.604 148.77,429.937 149.5,425C 149.821,420.728 150.654,416.562 152,412.5C 152.667,406.5 152.667,400.5 152,394.5C 145.023,378.54 138.023,362.54 131,346.5C 110.697,296.578 110.364,246.578 130,196.5C 148.518,162.002 176.685,139.169 214.5,128C 222.572,126.157 230.572,124.657 238.5,123.5 Z\\\" />',\\n            \\\"</g>\\\",\\n            \\\"<g>\\\",\\n            '<path style=\\\"opacity:1\\\" fill=\\\"#104f87\\\" d=\\\"M 227.5,163.5 C 266.181,160.002 299.348,171.669 327,198.5C 355.619,236.777 355.619,275.111 327,313.5C 313.887,329.308 297.054,338.141 276.5,340C 258.195,341.536 239.862,341.869 221.5,341C 198.795,338.806 178.461,330.806 160.5,317C 134.651,291.451 128.485,261.617 142,227.5C 158.095,189.57 186.595,168.236 227.5,163.5 Z\\\" />',\\n            \\\"</g>\\\",\\n            \\\"<g>\\\",\\n            '<path style=\\\"opacity:1\\\" fill=\\\"#fdfada\\\" d=\\\"M 230.5,171.5 C 265.692,169.171 295.859,180.171 321,204.5C 345.638,238.78 345.638,273.113 321,307.5C 308.698,322.402 292.865,330.568 273.5,332C 242.548,336.682 212.548,333.349 183.5,322C 144.616,299.346 134.116,267.179 152,225.5C 168.234,193.104 194.401,175.104 230.5,171.5 Z\\\" />',\\n            \\\"</g>\\\",\\n            \\\"<g>\\\",\\n            '<path style=\\\"opacity:1\\\" fill=\\\"#1d548a\\\" d=\\\"M 200.5,191.5 C 207.004,191.138 208.671,193.638 205.5,199C 196.613,203.961 187.447,205.128 178,202.5C 177.08,199.692 177.913,197.525 180.5,196C 185.547,195.662 190.547,194.995 195.5,194C 197.491,193.626 199.158,192.793 200.5,191.5 Z\\\" />',\\n            \\\"</g>\\\",\\n            \\\"<g>\\\",\\n            '<path style=\\\"opacity:1\\\" fill=\\\"#1d548a\\\" d=\\\"M 270.5,191.5 C 278.762,194.119 287.262,195.785 296,196.5C 300.073,201.965 298.573,204.632 291.5,204.5C 283.195,204.552 275.695,202.219 269,197.5C 268.252,195.16 268.752,193.16 270.5,191.5 Z\\\" />',\\n            \\\"</g>\\\",\\n            \\\"<g>\\\",\\n            '<path style=\\\"opacity:1\\\" fill=\\\"#0d4e87\\\" d=\\\"M 187.5,212.5 C 204.654,210.658 217.154,217.324 225,232.5C 226.033,245.925 221.866,257.425 212.5,267C 209.661,268.92 206.661,270.587 203.5,272C 186.552,276.109 174.718,270.275 168,254.5C 165.118,235.94 171.618,221.94 187.5,212.5 Z\\\" />',\\n            \\\"</g>\\\",\\n            \\\"<g>\\\",\\n            '<path style=\\\"opacity:1\\\" fill=\\\"#0f4f87\\\" d=\\\"M 283.5,212.5 C 299.224,212.105 310.724,218.772 318,232.5C 319.397,246.309 315.231,258.142 305.5,268C 291.429,276.27 278.262,275.103 266,264.5C 256.61,246.546 259.443,230.712 274.5,217C 277.592,215.454 280.592,213.954 283.5,212.5 Z\\\" />',\\n            \\\"</g>\\\",\\n            \\\"<g>\\\",\\n            '<path style=\\\"opacity:1\\\" fill=\\\"#fafbfc\\\" d=\\\"M 189.5,220.5 C 205.935,219.072 210.768,225.739 204,240.5C 199.261,246.082 193.761,246.915 187.5,243C 180.299,234.657 180.966,227.157 189.5,220.5 Z\\\" />',\\n            \\\"</g>\\\",\\n            \\\"<g>\\\",\\n            '<path style=\\\"opacity:1\\\" fill=\\\"#fbfcfd\\\" d=\\\"M 278.5,220.5 C 293.784,218.266 298.95,224.266 294,238.5C 290.259,245.423 284.759,247.256 277.5,244C 269.196,235.583 269.529,227.749 278.5,220.5 Z\\\" />',\\n            \\\"</g>\\\",\\n            \\\"<g>\\\",\\n            '<path style=\\\"opacity:1\\\" fill=\\\"#fbfbfd\\\" d=\\\"M 198.5,251.5 C 206.748,250.632 209.915,254.298 208,262.5C 205.947,266.292 202.781,267.458 198.5,266C 194.547,261.169 194.547,256.335 198.5,251.5 Z\\\" />',\\n            \\\"</g>\\\",\\n            \\\"<g>\\\",\\n            '<path style=\\\"opacity:1\\\" fill=\\\"#fafbfc\\\" d=\\\"M 287.5,251.5 C 293.875,250.049 297.208,252.549 297.5,259C 297.741,263.926 295.407,266.426 290.5,266.5C 288.088,266.594 286.255,265.594 285,263.5C 283.773,258.938 284.607,254.938 287.5,251.5 Z\\\" />',\\n            \\\"</g>\\\",\\n            '<g fill=\\\"#',\\n            colors[1],\\n            '\\\">',\\n            '<path style=\\\"opacity:1\\\" d=\\\"M 407.5,270.5 C 420.885,268.899 433.552,271.065 445.5,277C 455.197,283.228 459.364,292.061 458,303.5C 456.326,308.843 452.66,311.176 447,310.5C 439.317,309.742 432.483,306.909 426.5,302C 421.41,301.171 419.576,303.338 421,308.5C 428.86,313.172 430.36,319.339 425.5,327C 418.218,328.016 412.218,325.683 407.5,320C 405.5,319.333 403.5,319.333 401.5,320C 400.813,323.766 400.646,327.599 401,331.5C 398.016,334.1 394.516,335.1 390.5,334.5C 392.149,314.206 392.816,293.872 392.5,273.5C 397.647,272.604 402.647,271.604 407.5,270.5 Z\\\" />',\\n            '<path style=\\\"opacity:1\\\" d=\\\"M 99.5,301.5 C 103.167,301.5 106.833,301.5 110.5,301.5C 112.63,317.685 116.797,333.352 123,348.5C 122.196,359.231 116.863,362.564 107,358.5C 108.193,352.036 105.693,349.203 99.5,350C 96.3318,357.001 91.3318,362.167 84.5,365.5C 81.0122,364.508 79.1789,362.175 79,358.5C 78.154,353.944 78.654,349.611 80.5,345.5C 80.0194,340.618 77.6861,339.451 73.5,342C 69.1705,351.321 62.0038,357.487 52,360.5C 47.5071,359.346 44.1738,356.679 42,352.5C 38.3885,337.005 43.2218,324.838 56.5,316C 70.1726,308.832 84.506,303.998 99.5,301.5 Z\\\" />',\\n            \\\"</g>\\\",\\n            \\\"<g>\\\",\\n            '<path style=\\\"opacity:1\\\" fill=\\\"#185289\\\" d=\\\"M 240.5,279.5 C 248.093,281.879 254.593,286.213 260,292.5C 261.316,296.128 260.149,298.461 256.5,299.5C 252.13,295.96 247.63,292.626 243,289.5C 238.932,292.119 234.766,294.619 230.5,297C 225.504,297.664 223.67,295.498 225,290.5C 230.625,287.359 235.792,283.692 240.5,279.5 Z\\\" />',\\n            \\\"</g>\\\",\\n            \\\"<g>\\\",\\n            '<path style=\\\"opacity:1\\\" fill=\\\"#0d4f87\\\" d=\\\"M 198.5,343.5 C 201.044,343.104 203.211,343.771 205,345.5C 206.175,351.865 207.508,358.199 209,364.5C 209.667,370.5 209.667,376.5 209,382.5C 207.347,386.482 204.347,388.482 200,388.5C 192.645,386.16 186.645,381.826 182,375.5C 177.468,369.773 173.968,363.44 171.5,356.5C 172.486,352.853 174.819,351.686 178.5,353C 182.565,362.731 188.565,371.065 196.5,378C 198.025,379.009 199.692,379.509 201.5,379.5C 201.147,369.199 199.814,359.032 197.5,349C 197.581,347.076 197.914,345.243 198.5,343.5 Z\\\" />',\\n            \\\"</g>\\\",\\n            \\\"<g>\\\",\\n            '<path style=\\\"opacity:1\\\" fill=\\\"#0f4f88\\\" d=\\\"M 304.5,343.5 C 308.198,342.68 310.531,344.013 311.5,347.5C 307.669,355.828 303.836,364.162 300,372.5C 298.051,383.885 301.884,386.385 311.5,380C 318.645,373.193 324.645,365.527 329.5,357C 331.5,356.333 333.5,356.333 335.5,357C 336.081,357.893 336.415,358.893 336.5,360C 332.155,370.028 325.821,378.694 317.5,386C 312.062,390.921 305.729,392.588 298.5,391C 293.297,388.267 290.631,383.933 290.5,378C 290.908,373.292 292.074,368.792 294,364.5C 297.529,357.442 301.029,350.442 304.5,343.5 Z\\\" />',\\n            \\\"</g>\\\",\\n            '<g fill=\\\"#',\\n            colors[2],\\n            '\\\">',\\n            '<path style=\\\"opacity:0.968\\\" d=\\\"M 236.5,464.5 C 255.503,464.333 274.503,464.5 293.5,465C 309.512,465.716 325.178,468.382 340.5,473C 344.475,473.967 347.142,476.3 348.5,480C 348.097,481.473 347.43,482.806 346.5,484C 333.142,489.873 319.142,493.206 304.5,494C 270.707,496.739 237.04,495.739 203.5,491C 195.508,490.053 188.342,487.22 182,482.5C 181.267,477.537 183.433,474.37 188.5,473C 204.33,468.434 220.33,465.6 236.5,464.5 Z\\\" />',\\n            \\\"</g>\\\",\\n            \\\"</svg>\\\"\\n        );\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:image/svg+xml;base64,\\\",\\n                    Base64.encode(svg)\\n                )\\n            );\\n    }\\n}\",\"keccak256\":\"0xd0654e2cf3511e44bb021462346a782c7640cd923d9bb419e8571e2295ff6d19\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600091823560e01c80634303707e146132ea578063a561b7d4146100815763e8a8d6e51461004257600080fd5b3461007d57602036600319011261007d573591600a83101561007a575061006b610076926133d0565b905191829182613334565b0390f35b80fd5b8280fd5b50913461007a578060031936011261007a5781519261009f84613360565b815b6060808210156100b757858201526020016100a1565b50509282516100c581613360565b60603682376000194301924384116132d757600a8551946020958681019184835242898301524460608301524060808201526080815261010481613392565b51902006808352600a8110156132c45761011d906133d0565b835261012982516134a1565b91610139858201938085526134a1565b600a8110156132b15761016a9161016061015389936133d0565b95888801968752516134a1565b91829101526134a1565b90600a82101561329e5761007661328487613294603a8961324b8a6132466128018c6101958d6133d0565b93848a8201525190519389519485927f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f3230898501527f30302f737667222076657273696f6e3d22312e31222077696474683d223530308c8501527f707822206865696768743d22353030707822207374796c653d2273686170652d60608501527f72656e646572696e673a67656f6d6574726963507265636973696f6e3b20746560808501527f78742d72656e646572696e673a67656f6d6574726963507265636973696f6e3b60a08501527f20696d6167652d72656e646572696e673a6f7074696d697a655175616c69747960c08501527f3b2066696c6c2d72756c653a6576656e6f64643b20636c69702d72756c653a6560e08501527f76656e6f64642220786d6c6e733a786c696e6b3d22687474703a2f2f7777772e610100850152723b999737b93397989c9c9c97bc3634b735911f60691b61012085015288621e339f60e91b806101338701527f3c70617468207374796c653d226f7061636974793a302e393434222066696c6c6101368701527f3d22233037346438362220643d224d203335362e352c332e352043203335382e6101568701527f31372c332e3735313135203335392e36372c342e3431373832203336312c352e6101768701527f3543203336332e3431352c31322e3235203336352e3931352c31382e393136366101968701527f203336382e352c32352e3543203337342e3436342c32372e34333234203338306101b68701527f2e3436342c32392e32363538203338362e352c333143203339302e3631352c336101d68701527f342e36303035203339302e3238312c33372e39333339203338352e352c3431436101f68701527f203338312c34342e31363637203337362e352c34372e33333333203337322c356102168701527f302e3543203337312e3237332c35362e36393336203337312e3433392c36322e6102368701527f38363033203337322e352c363943203337322e30382c37332e333734392033366102568701527f392e3734372c37352e30343135203336352e352c373443203336312e3336312c6102768701527f37312e33363039203335372e3336312c36382e35323736203335332e352c36356102968701527f2e3543203334322e3136332c38362e38333535203332342e3439362c39362e306102b68701527f303232203330302e352c393343203238352e3333342c38372e353635352032376102d68701527f302e3636372c38382e35363535203235362e352c393643203235302e3036332c6102f68701527f3130302e363137203234352e37332c3130362e373834203234332e352c3131346103168701527f2e3543203239392e3537332c3131322e363034203334312e3037332c3133352e6103368701527f393338203336382c3138342e3543203338322e3034332c3230392e33333820336103568701527f38392e3837362c3233362e303035203339312e352c3236342e3543203430302e6103768701527f3737372c3236332e303632203431302e3131312c3236322e303632203431392e6103968701527f352c3236312e3543203433362e3239362c3236302e383138203435302e31332c6103b68701527f3236362e383138203436312c3237392e3543203436372e3836392c3238392e316103d68701527f3337203436392e3230322c3239392e3437203436352c3331302e3543203436326103f68701527f2e3138382c3331342e363632203435382e3335352c3331372e343935203435336104168701527f2e352c33313943203434382e3134362c3331392e353239203434322e3831332c6104368701527f3331392e333632203433372e352c3331382e3543203433352e3534342c3333356104568701527f2e363532203432362e3534342c3334302e363532203431302e352c3333332e356104768701527f43203430362e3434362c3334302e32203430302e3434362c3334332e383637206104968701527f3339322e352c3334342e3543203339342e3230392c3335302e333736203339376104b68701527f2e3837362c3335342e353433203430332e352c33353743203431332e3038372c6104d68701527f3335392e313534203432322e3735342c3336302e363534203433322e352c33366104f68701527f312e3543203433352e3331322c3336372e303237203433342e3831322c3337326105168701527f2e3336203433312c3337372e3543203432312e31372c3339312e3137352034306105368701527f382e3030332c3430302e303038203339312e352c34303443203338352e352c346105568701527f30372e333333203337392e352c3431302e363637203337332e352c34313443206105768701527f3336352e3031332c3431362e303732203335372e3031332c3431342e373339206105968701527f3334392e352c34313043203334362e3136372c3430392e333333203334322e386105b68701527f33332c3430392e333333203333392e352c34313043203333302e3833332c34316105d68701527f35203332322e3136372c343230203331332e352c34323543203330372e3030336105f68701527f2c3432382e303339203330302e3333362c3432382e373036203239332e352c346106168701527f323743203238382e3833332c3432342e333333203238342e3136372c3432312e6106368701527f363637203237392e352c34313943203237312e3634352c3431362e39333920326106568701527f36342e3331322c3431382e323732203235372e352c34323343203235312e31366106768701527f372c3432372e333333203234342e3833332c3433312e363637203233382e352c6106968701527f34333643203233322e3133352c3433392e373033203232352e3436382c3434306106b68701527f2e3337203231382e352c34333843203231322e3830392c3433342e34383720326106d68701527f30372e3437362c3433302e343837203230322e352c34323643203139372e36356106f68701527f322c3432332e323131203139322e3635322c3432322e383738203138372e352c6107168701527f34323543203138302e3635382c3432382e393232203137332e3635382c3433326107368701527f2e353838203136362e352c34333643203136302e3333382c3433382e323634206107568701527f3135342e3030342c3433382e3933203134372e352c34333843203134322e32376107768701527f322c3433352e353033203133392e3933392c3433312e333337203134302e352c6107968701527f3432352e3543203134312e3433342c3431382e323633203134322e3736372c346107b68701527f31312e303937203134342e352c34303443203134312e3437332c3338392e31306107d68701527f38203133352e3830362c3337352e323735203132372e352c3336322e354320316107f68701527f31392e3237322c3337302e353231203131302e3237322c3337312e35323120316108168701527f30302e352c3336352e35432039362e303632372c3337302e3433352039302e356108368701527f3632372c3337332e3433352038342c3337342e35432037362e303232382c33376108568701527f332e3138392037312e333536312c3336382e3532332037302c3336302e3543206108768701527f35392e323133342c3337302e3730382034382e323133342c3337312e303431206108968701527f33372c3336312e35432032392e343932312c3334372e3533342033302e3135386108b68701527f382c3333332e3836382033392c3332302e35432034392e303539392c3330392e6108d68701527f3034392036312e353539392c3330312e3534392037362e352c323938432038366108f68701527f2e393837352c3239352e3036392039372e363534312c3239332e3233362031306109168701527f382e352c3239322e3543203130342e3838372c3235372e323838203130392e376109368701527f32312c3232332e323838203132332c3139302e3543203134312e3738392c31356109568701527f362e303534203136392e3935362c3133322e383838203230372e352c313231436109768701527f203231362e3036392c3131382e363238203232342e3733362c3131362e3739356109968701527f203233332e352c3131352e3543203233392e3930322c39322e323830372032356109b68701527f352e3233352c38302e36313431203237392e352c38302e3543203238372e32356109d68701527f352c38312e30393433203239342e3932312c38322e323631203330322e352c386109f68701527f3443203331392e3935352c38362e32373139203333332e3238382c37392e3933610a168701527f3836203334322e352c363543203333382e3239382c36362e3232373220333333610a368701527f2e3936342c36372e33393339203332392e352c36382e3543203332362e343538610a568701527f2c36382e35373535203332342e3739312c36372e30373535203332342e352c36610a768701527f3443203332362e3639332c35372e37353239203332382e3639332c35312e3431610a968701527f3935203333302e352c343543203332372e3434392c33392e3539393720333233610ab68701527f2e3934392c33342e34333331203332302c32392e3543203331372e3938332c32610ad68701527f362e38373238203331382e31352c32342e33373238203332302e352c32324320610af68701527f3332372e3833332c32312e36363637203333352e3136372c32312e3333333320610b168701527f3334322e352c323143203334362e3833362c31342e37383339203335312e3530610b368701527f332c382e3935303537203335362e352c332e35205a22202f3e00000000000000610b56870152631e17b39f60e11b9384610b6f880152693c672066696c6c3d222360b01b9182610b738901528451610fb881610b7d9787898d019101613311565b88019161111f60f11b80968401527f3c70617468207374796c653d226f7061636974793a312220643d224d20333535610b7f8401527f2e352c31382e352043203335372e3636322c32322e31343032203335392e3136610b9f8401527f322c32362e31343032203336302c33302e3543203336302e3833332c33312e33610bbf8401527f333333203336312e3636372c33322e31363637203336322e352c333343203336610bdf8401527f362e3438392c33342e33333134203337302e3438392c33352e36363437203337610bff8401527f342e352c333743203337312c33392e38333333203336372e352c34322e363636610c1f8401527f37203336342c34352e3543203336332e3636372c35302e38333333203336332e610c3f8401527f3333332c35362e31363637203336332c36312e3543203335382e3939382c3538610c5f8401527f2e30303039203335342e3636352c35352e30303039203335302c35322e354320610c7f8401527f3334352e3439332c35332e373739203334312e31362c35352e34343537203333610c9f8401527f372c35372e3543203333372e3632312c35322e37383237203333382e3738382c610cbf8401527f34382e313136203334302e352c34332e3543203333382e3232322c33392e3131610cdf8401527f3736203333352e3535362c33342e39353039203333322e352c33314320333337610cff8401527f2e352c33302e36363637203334322e352c33302e33333333203334372e352c33610d1f8401527f3043203335302e332c32362e32323439203335322e3936362c32322e33393136610d3f8401527010199a9a971a96189c171a902d1110179f60791b610d5f84015286610d7084015281610d748401527f3c70617468207374796c653d226f7061636974793a31222066696c6c3d222363610d778401527f35626664652220643d224d203233382e352c3132332e352043203236342e3236610d978401527f372c3132322e383439203238382e3933332c3132372e363833203331322e352c610db78401527f31333843203332352e3833332c3134352e393934203333372e3333332c313536610dd78401527f2e3136203334372c3136382e3543203337302e34352c3230302e313738203338610df78401527f322e3738332c3233352e383435203338342c3237352e3543203338342e363033610e178401527f2c3239352e3139203338342e3130332c3331342e383537203338322e352c3333610e378401527f342e3543203338322e3036312c3334392e32203338382e3339342c3335392e37610e578401527f203430312e352c33363643203430392e3231382c3336372e323836203431362e610e778401527f3838342c3336382e373836203432342e352c3337302e3543203431352e393939610e978401527f2c3338332e313634203430342e3333322c3339312e333331203338392e352c33610eb78401527f393543203338322e3537392c3339382e323635203337352e3931332c3430312e610ed78401527f393332203336392e352c34303643203336322e3831342c3430352e3939392033610ef78401527f35362e3438312c3430342e333332203335302e352c34303143203334362e352c610f178401527f3430302e333333203334322e352c3430302e333333203333382e352c34303143610f378401527f203332382e3338332c3430352e353538203331382e3731362c3431302e383931610f578401527f203330392e352c34313743203330352e3733382c3431392e313536203330312e610f778401527f3733382c3431392e383233203239372e352c34313943203239322e3339382c34610f978401527f31362e303332203238372e3233312c3431332e313939203238322c3431302e35610fb78401527f43203237342e3332362c3430372e383131203236362e3832362c3430382e3331610fd78401527f31203235392e352c34313243203235302e3635382c3431362e35383520323432610ff78401527f2e3332352c3432312e393138203233342e352c34323843203232392e3939342c6110178401527f3433302e383134203232352e3332372c3433312e313437203232302e352c34326110378401527f3943203231342e3239352c3432332e313236203230372e3239352c3431382e346110578401527f36203139392e352c34313543203139352e3833332c3431342e333333203139326110778401527f2e3136372c3431342e333333203138382e352c34313543203137372e3838382c6110978401527f3432302e383035203136362e3838382c3432352e383035203135352e352c34336110b78401527f3043203135302e37372c3433312e363034203134382e37372c3432392e3933376110d78401527f203134392e352c34323543203134392e3832312c3432302e373238203135302e6110f78401527f3635342c3431362e353632203135322c3431322e3543203135322e3636372c346111178401527f30362e35203135322e3636372c3430302e35203135322c3339342e35432031346111378401527f352e3032332c3337382e3534203133382e3032332c3336322e3534203133312c6111578401527f3334362e3543203131302e3639372c3239362e353738203131302e3336342c326111778401527f34362e353738203133302c3139362e3543203134382e3531382c3136322e30306111978401527f32203137362e3638352c3133392e313639203231342e352c31323843203232326111b78401527f2e3537322c3132362e313537203233302e3537322c3132342e363537203233386111d78401526d171a96189919971a902d1110179f60911b6111f78401528661120584015281611209840152857f3c70617468207374796c653d226f7061636974793a31222066696c6c3d222331918261120c8601527f30346638372220643d224d203232372e352c3136332e352043203236362e313861122c8601527f312c3136302e303032203239392e3334382c3137312e363639203332372c313961124c8601527f382e3543203335352e3631392c3233362e373737203335352e3631392c32373561126c8601527f2e313131203332372c3331332e3543203331332e3838372c3332392e3330382061128c8601527f3239372e3035342c3333382e313431203237362e352c33343043203235382e316112ac8601527f39352c3334312e353336203233392e3836322c3334312e383639203232312e356112cc8601527f2c33343143203139382e3739352c3333382e383036203137382e3436312c33336112ec8601527f302e383036203136302e352c33313743203133342e3635312c3239312e34353161130c8601527f203132382e3438352c3236312e363137203134322c3232372e3543203135382e61132c8601527f3039352c3138392e3537203138362e3539352c3136382e323336203232372e3561134c8601526b16189b19971a902d1110179f60a11b61136c860152886113788601528361137c8601527f3c70617468207374796c653d226f7061636974793a31222066696c6c3d222366948561137f8201527f64666164612220643d224d203233302e352c3137312e352043203236352e363961139f8201527f322c3136392e313731203239352e3835392c3138302e313731203332312c32306113bf8201527f342e3543203334352e3633382c3233382e3738203334352e3633382c3237332e6113df8201527f313133203332312c3330372e3543203330382e3639382c3332322e34303220326113ff8201527f39322e3836352c3333302e353638203237332e352c33333243203234322e353461141f8201527f382c3333362e363832203231322e3534382c3333332e333439203138332e352c61143f8201527f33323243203134342e3631362c3239392e333436203133342e3131362c32363761145f8201527f2e313739203135322c3232352e3543203136382e3233342c3139332e3130342061147f8201527f3139342e3430312c3137352e313034203233302e352c3137312e35205a22202f61149f820152601f60f91b95866114bf8301528a6114c0830152856114c4830152846114c78301527f64353438612220643d224d203230302e352c3139312e352043203230372e30306114e78301527f342c3139312e313338203230382e3637312c3139332e363338203230352e352c6115078301527f31393943203139362e3631332c3230332e393631203138372e3434372c3230356115278301527f2e313238203137382c3230322e3543203137372e30382c3139392e36393220316115478301527f37372e3931332c3139372e353235203138302e352c31393643203138352e35346115678301527f372c3139352e363632203139302e3534372c3139342e393935203139352e352c6115878301527f31393443203139372e3439312c3139332e363236203139392e3135382c3139326115a783015275171b9c9990191818171a96189c98971a902d1110179f60511b6115c78301528a6115dd830152856115e1830152846115e48301527f64353438612220643d224d203237302e352c3139312e352043203237382e37366116048301527f322c3139342e313139203238372e3236322c3139352e373835203239362c31396116248301527f362e3543203330302e3037332c3230312e393635203239382e3537332c3230346116448301527f2e363332203239312e352c3230342e3543203238332e3139352c3230342e35356116648301527f32203237352e3639352c3230322e323139203236392c3139372e3543203236386116848301527f2e3235322c3139352e3136203236382e3735322c3139332e3136203237302e356116a48301526b16189c98971a902d1110179f60a11b6116c48301528a6116d0830152856116d48301527f3c70617468207374796c653d226f7061636974793a31222066696c6c3d22233096876116d78401527f64346538372220643d224d203138372e352c3231322e352043203230342e36356116f78401527f342c3231302e363538203231372e3135342c3231372e333234203232352c32336117178401527f322e3543203232362e3033332c3234352e393235203232312e3836362c3235376117378401527f2e343235203231322e352c32363743203230392e3636312c3236382e393220326117578401527f30362e3636312c3237302e353837203230332e352c32373243203138362e35356117778401527f322c3237362e313039203137342e3731382c3237302e323735203136382c32356117978401527f342e3543203136352e3131382c3233352e3934203137312e3631382c3232312e6117b7840152731c9a10189c1b971a96191899171a902d1110179f60611b6117d78401528b6117eb840152866117ef840152876117f28401527f66346638372220643d224d203238332e352c3231322e352043203239392e32326118128401527f342c3231322e313035203331302e3732342c3231382e373732203331382c32336118328401527f322e3543203331392e3339372c3234362e333039203331352e3233312c3235386118528401527f2e313432203330352e352c32363843203239312e3432392c3237362e323720326118728401527f37382e3236322c3237352e313033203236362c3236342e3543203235362e36316118928401527f2c3234362e353436203235392e3434332c3233302e373132203237342e352c326118b28401527f313743203237372e3539322c3231352e343534203238302e3539322c3231332e6118d2840152741c9a9a10191c19971a96191899171a902d1110179f60591b6118f28401528b6119078401528661190b8401528161190e8401527f61666266632220643d224d203138392e352c3232302e352043203230352e393361192e8401527f352c3231392e303732203231302e3736382c3232352e373339203230342c323461194e8401527f302e3543203139392e3236312c3234362e303832203139332e3736312c32343661196e8401527f2e393135203138372e352c32343343203138302e3239392c3233342e3635372061198e8401527f3138302e3936362c3232372e313537203138392e352c3232302e35205a22202f6119ae840152806119ce8401528b6119cf840152866119d3840152816119d68401527f62666366642220643d224d203237382e352c3232302e352043203239332e37386119f68401527f342c3231382e323636203239382e39352c3232342e323636203239342c323338611a168401527f2e3543203239302e3235392c3234352e343233203238342e3735392c3234372e611a368401527f323536203237372e352c32343443203236392e3139362c3233352e3538332032611a568401527f36392e3532392c3232372e373439203237382e352c3232302e35205a22202f3e611a768401528b611a9684015286611a9a84015281611a9d8401527f62666266642220643d224d203139382e352c3235312e352043203230362e3734611abd8401527f382c3235302e363332203230392e3931352c3235342e323938203230382c3236611add8401527f322e3543203230352e3934372c3236362e323932203230322e3738312c323637611afd8401527f2e343538203139382e352c32363643203139342e3534372c3236312e31363920611b1d8401527f3139342e3534372c3235362e333335203139382e352c3235312e35205a22202f611b3d840152611b5d8301528a611b5e83015285611b62830152611b658201527f61666266632220643d224d203238372e352c3235312e352043203239332e3837611b858201527f352c3235302e303439203239372e3230382c3235322e353439203239372e352c611ba58201527f32353943203239372e3734312c3236332e393236203239352e3430372c323636611bc58201527f2e343236203239302e352c3236362e3543203238382e3038382c3236362e3539611be58201527f34203238362e3235352c3236352e353934203238352c3236332e354320323833611c058201527f2e3737332c3235382e393338203238342e3630372c3235342e39333820323837611c258201526d171a96191a98971a902d1110179f60911b611c4582015289611c5382015286611c5782015261241782518093611c619a8b85019101613311565b01958601527f3c70617468207374796c653d226f7061636974793a312220643d224d20343037611c638601527f2e352c3237302e352043203432302e3838352c3236382e383939203433332e35611c838601527f35322c3237312e303635203434352e352c32373743203435352e3139372c3238611ca38601527f332e323238203435392e3336342c3239322e303631203435382c3330332e3543611cc38601527f203435362e3332362c3330382e383433203435322e36362c3331312e31373620611ce38601527f3434372c3331302e3543203433392e3331372c3330392e373432203433322e34611d038601527f38332c3330362e393039203432362e352c33303243203432312e34312c333031611d238601527f2e313731203431392e3537362c3330332e333338203432312c3330382e354320611d438601527f3432382e38362c3331332e313732203433302e33362c3331392e333339203432611d638601527f352e352c33323743203431382e3231382c3332382e303136203431322e323138611d838601527f2c3332352e363833203430372e352c33323043203430352e352c3331392e3333611da38601527f33203430332e352c3331392e333333203430312e352c33323043203430302e38611dc38601527f31332c3332332e373636203430302e3634362c3332372e353939203430312c33611de38601527f33312e3543203339382e3031362c3333342e31203339342e3531362c3333352e611e038601527f31203339302e352c3333342e3543203339322e3134392c3331342e3230362033611e238601527f39322e3831362c3239332e383732203339322e352c3237332e3543203339372e611e438601527f3634372c3237322e363034203430322e3634372c3237312e363034203430372e611e638601526c1a96191b98171a902d1110179f60991b611e838601527f3c70617468207374796c653d226f7061636974793a312220643d224d2039392e611e908601527f352c3330312e352043203130332e3136372c3330312e35203130362e3833332c611eb08601527f3330312e35203131302e352c3330312e3543203131322e36332c3331372e3638611ed08601527f35203131362e3739372c3333332e333532203132332c3334382e354320313232611ef08601527f2e3139362c3335392e323331203131362e3836332c3336322e35363420313037611f108601527f2c3335382e3543203130382e3139332c3335322e303336203130352e3639332c611f308601527f3334392e3230332039392e352c333530432039362e333331382c3335372e3030611f508601527f312039312e333331382c3336322e3136372038342e352c3336352e3543203831611f708601527f2e303132322c3336342e3530382037392e313738392c3336322e313735203739611f908601527f2c3335382e35432037382e3135342c3335332e3934342037382e3635342c3334611fb08601527f392e3631312038302e352c3334352e35432038302e303139342c3334302e3631611fd08601527f382037372e363836312c3333392e3435312037332e352c333432432036392e31611ff08601527f3730352c3335312e3332312036322e303033382c3335372e3438372035322c336120108601527f36302e35432034372e353037312c3335392e3334362034342e313733382c33356120308601527f362e3637392034322c3335322e35432033382e333838352c3333372e303035206120508601527f34332e323231382c3332342e3833382035362e352c333136432037302e3137326120708601527f362c3330382e3833322038342e3530362c3330332e3939382039392e352c33306120908601526818971a902d1110179f60b91b6120b0860152866120b9860152816120bd8601526120c08501527f38353238392220643d224d203234302e352c3237392e352043203234382e30396120e08501527f332c3238312e383739203235342e3539332c3238362e323133203236302c32396121008501527f322e3543203236312e3331362c3239362e313238203236302e3134392c3239386121208501527f2e343631203235362e352c3239392e3543203235322e31332c3239352e3936206121408501527f3234372e36332c3239322e363236203234332c3238392e3543203233382e39336121608501527f322c3239322e313139203233342e3736362c3239342e363139203233302e352c6121808501527f32393743203232352e3530342c3239372e363634203232332e36372c3239352e6121a08501527f343938203232352c3239302e3543203233302e3632352c3238372e33353920326121c08501527f33352e3739322c3238332e363932203234302e352c3237392e35205a22202f3e6121e08501528561220085015280612204850152816122078501527f64346638372220643d224d203139382e352c3334332e352043203230312e30346122278501527f342c3334332e313034203230332e3231312c3334332e373731203230352c33346122478501527f352e3543203230362e3137352c3335312e383635203230372e3530382c3335386122678501527f2e313939203230392c3336342e3543203230392e3636372c3337302e352032306122878501527f392e3636372c3337362e35203230392c3338322e3543203230372e3334372c336122a78501527f38362e343832203230342e3334372c3338382e343832203230302c3338382e356122c78501527f43203139322e3634352c3338362e3136203138362e3634352c3338312e3832366122e78501527f203138322c3337352e3543203137372e3436382c3336392e373733203137332e6123078501527f3936382c3336332e3434203137312e352c3335362e3543203137322e3438362c6123278501527f3335322e383533203137342e3831392c3335312e363836203137382e352c33356123478501527f3343203138322e3536352c3336322e373331203138382e3536352c3337312e306123678501527f3635203139362e352c33373843203139382e3032352c3337392e3030392031396123878501527f392e3639322c3337392e353039203230312e352c3337392e3543203230312e316123a78501527f34372c3336392e313939203139392e3831342c3335392e303332203139372e356123c78501527f2c33343943203139372e3538312c3334372e303736203139372e3931342c33346123e78501527f352e323433203139382e352c3334332e35205a22202f3e0000000000000000006124078501528561241e8501526124228401526124258301527f66346638382220643d224d203330342e352c3334332e352043203330382e31396124458301527f382c3334322e3638203331302e3533312c3334342e303133203331312e352c336124658301527f34372e3543203330372e3636392c3335352e383238203330332e3833362c33366124858301527f342e313632203330302c3337322e3543203239382e3035312c3338332e3838356124a58301527f203330312e3838342c3338362e333835203331312e352c33383043203331382e6124c58301527f3634352c3337332e313933203332342e3634352c3336352e353237203332392e6124e58301527f352c33353743203333312e352c3335362e333333203333332e352c3335362e336125058301527f3333203333352e352c33353743203333362e3038312c3335372e3839332033336125258301527f362e3431352c3335382e383933203333362e352c33363043203333322e3135356125458301527f2c3337302e303238203332352e3832312c3337382e363934203331372e352c336125658301527f383643203331322e3036322c3339302e393231203330352e3732392c3339322e6125858301527f353838203239382e352c33393143203239332e3239372c3338382e32363720326125a58301527f39302e3633312c3338332e393333203239302e352c33373843203239302e39306125c58301527f382c3337332e323932203239322e3037342c3336382e373932203239342c33366125e58301527f342e3543203239372e3532392c3335372e343432203330312e3032392c33353061260583015275171a1a191019981a171a96199a19971a902d1110179f60511b6126258301528361263b83015261263f82015283519061300b82612649968d8885019101613311565b01928301527f3c70617468207374796c653d226f7061636974793a302e3936382220643d224d61264b8301527f203233362e352c3436342e352043203235352e3530332c3436342e333333203261266b8301527f37342e3530332c3436342e35203239332e352c34363543203330392e3531322c61268b8301527f3436352e373136203332352e3137382c3436382e333832203334302e352c34376126ab8301527f3343203334342e3437352c3437332e393637203334372e3134322c3437362e336126cb8301527f203334382e352c34383043203334382e3039372c3438312e343733203334372e6126eb8301527f34332c3438322e383036203334362e352c34383443203333332e3134322c343861270b8301527f392e383733203331392e3134322c3439332e323036203330342e352c3439344361272b8301527f203237302e3730372c3439362e373339203233372e30342c3439352e3733392061274b8301527f3230332e352c34393143203139352e3530382c3439302e303533203138382e3361276b8301527f34322c3438372e3232203138322c3438322e3543203138312e3236372c34373761278b8301527f2e353337203138332e3433332c3437342e3337203138382e352c3437334320326127ab8301527f30342e33332c3436382e343334203232302e33332c3436352e36203233362e356127cb8301526b161a1b1a171a902d1110179f60a11b6127eb8301526127f7820152651e17b9bb339f60d11b6127fb820152036127e18101845201826133ae565b613514565b845195827f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000889485015282519283918686019101613311565b810103601a8101855201836133ae565b5191829182613334565b634e487b7160e01b815260328752602490fd5b634e487b7160e01b835260328852602483fd5b634e487b7160e01b825260328752602482fd5b634e487b7160e01b815260118652602490fd5b50913461007a57602036600319011261007a575061330a602092356134a1565b9051908152f35b60005b8381106133245750506000910152565b8181015183820152602001613314565b604091602082526133548151809281602086015260208686019101613311565b601f01601f1916010190565b6060810190811067ffffffffffffffff82111761337c57604052565b634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff82111761337c57604052565b90601f8019910116810190811067ffffffffffffffff82111761337c57604052565b90604051906000835490600182811c90808416968715613497575b602094858410891461348357879884899798995290816000146134615750600114613422575b505050613420925003836133ae565b565b600090815285812095935091905b8183106134495750506134209350820101388080613411565b85548884018501529485019487945091830191613430565b9250505061342094925060ff191682840152151560051b820101388080613411565b634e487b7160e01b85526022600452602485fd5b91607f16916133eb565b6000194301904382116134e257600a916040519060208201928352426040830152446060830152406080820152608081526134db81613392565b5190200690565b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff811161337c57601f01601f191660200190565b8051156136675760405161352781613360565b604081527f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f604082015281516002928382018092116134e25760039182900480851b94906001600160fe1b038116036134e257926135c36135ad866134f8565b956135bb60405197886133ae565b8087526134f8565b6020860190601f190136823793829183518401925b8381106136165750505050510680600114613603576002146135f8575090565b603d90600019015390565b50603d9081600019820153600119015390565b85600491979293949701918251600190603f9082828260121c16880101518453828282600c1c16880101518385015382828260061c16880101518885015316850101518782015301959291906135d8565b506040516020810181811067ffffffffffffffff82111761337c57604052600081529056fea2646970667358221220324c1342ea5ab5f0820d5b293e8ebbc3b61ae13ddf14028c2f2edd077e1fb9e064736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4595,
        "contract": "contracts/Character3.sol:Character3",
        "label": "colorNames",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_string_storage)10_storage"
      }
    ],
    "types": {
      "t_array(t_string_storage)10_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[10]",
        "numberOfBytes": "320"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}